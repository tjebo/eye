[{"path":"https://github.com/tjebo/eye/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 MIT Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"see-more-with-eye","dir":"Articles","previous_headings":"","what":"See more with eye","title":"eye","text":"","code":"library(eye) library(eyedata)"},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"eye","text":"eye dedicated facilitate ophthalmic research, providing convenient application programming interfaces (API) common tasks: Handling visual acuity notations Easy count patients eyes Easy recoding eye variable Reshape eye data - long wide Quick summary eye data Get common summary statistics Calculate age Clean NA equivalent entries eye includes visual acuity conversion chart.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"visual-acuity","dir":"Articles","previous_headings":"","what":"Visual acuity","title":"eye","text":"Pesky visual acuity notations now matter past. Convert Snellen (meter/ feet/ decimal!), logMAR ETDRS. notation detected automatically converted desired notation. details see VA conversion. entries mixed notation, use va_mixed instead. can also decide simply “clean” VA vector cleanVA(x). remove entries certainly VA. va() (course, wrappers) cleans converts visual acuity notations (classes) Snellen (decimal, meter feet), ETDRS, logMAR. class can converted one another. va() detect class automatically based specific rules detailed . Calling va() without specifying “” argument simply clean visual acuity entries - notations accepted, plausibility checks yet performed. bascially wrapper around cleanVA. takes (atomic) vector visual acuity entries required argument. user can specify original VA notation, va check ignore argument implausible.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"conversion-steps","dir":"Articles","previous_headings":"Visual acuity","what":"Conversion steps","title":"eye","text":"va() basically runs three main steps: Entry cleaning clean_va() Notation detection which_va() Plausibility checks checkVA() Conversion S3 generic convertVA()","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"cleaning","dir":"Articles","previous_headings":"Visual acuity","what":"Cleaning","title":"eye","text":"NA assigned missing entries strings representing entries (“.”, ““,”{number spaces}“,”N/”, “NA”, “NULL”, “-”) Notation qualitative entries simplified (NPL becomes NLP, PL becomes LP). entry -2 +2 : take Snellen value < -2 : take Snellen value one line >+2 : Snellen value one line Snellen unfortunately often entered “+/-”, violation psychophysical methods designed assign one (!) unambiguous value visual acuity, non-arbitrary thresholds based psychometric functions. Therefore, transforming “+/-” notation actual results problematic suggestion convert remain approximation likely “true” result. Even , given conditions work charts 4 5 optotypes line, visual acuity always tested charts. Yet, believe approach still better just omitting letters (worse) assigning missing value entries. argument smallstep = TRUE, entries converted logmar values (0.02 logmar optotype). based assumption 5 optotypes row. argument can overriden noplus = TRUE, ignoring plus minus entries entirely simply returning nearest Snellen values.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"detection","dir":"Articles","previous_headings":"Visual acuity","what":"Detection","title":"eye","text":"Internally done which_va() based following rules x integer 3 < x <= 100: etdrs x integer 0 <= x <= 3: logmar, snellendec etdrs x numeric -0.3 <= x <= 3: logmar snellendec character format x/y: snellen (fraction) one “CF”, “HM”, “LP”, “PL”, “NLP”, “NPL”: quali","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"accepted-va-formats-plausibility-checks-plausibility","dir":"Articles","previous_headings":"Visual acuity > Detection","what":"Accepted VA formats / Plausibility checks [#plausibility]","title":"eye","text":"Snellen fractions (meter/ feet) need entered fraction “/”. fraction allowed e.g. 3/60 2/200 also recognized. ETDRS must integer-equivalent 0 100 (integer equivalent means, can also character vector) logMAR must -0.3 3.0 snellendec must greater 0 smaller equal 2 Qualitative must either PL, LP, NLP, NPL, HM, CF (case allowed) element implausible / recognized converted NA","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"conversion","dir":"Articles","previous_headings":"Visual acuity","what":"Conversion","title":"eye","text":"logMAR ETDRS: logMAR rounded first digit converted chart. Snellen logMAR: logMAR = -1 * log10(snellen_frac) Snellen ETDRS: ETDRS = 85 + 50 * log10(snellen_frac) Gregori et al.. ETDRS logMAR: logMAR = -0.02 * etdrs + 1.7 Beck et al. Hand movements counting fingers converted following Schulze-Bonsel et al. (https://doi.org/10.1167/iovs.05-0981) () light perception converted following suggestions Michael Bach Snellen: Although seems good statistical reason convert back Snellen, natural thing eye specialists think Snellen. conversion snellen gives good gauge visual acuity patients . However, back-conversion considered exact science attempt use formulas result weird Snellen values correspondence common charts. Therefore, Snellen matching nearest ETDRS logMAR value VA conversion chart used.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"qualitative-visual-acuity-measures","dir":"Articles","previous_headings":"Visual acuity","what":"Qualitative visual acuity measures","title":"eye","text":"default, va recognises following values (case matter!) light perception := c(“nlp”, “light perception”, “light”, “perception light”, “npl”), Light perception: = c(“lp”, “light perception”, “perception light”, “pl”), Hand movements: = c(“hm”, “handmotion”, “hand movement”, “hand movements”), Counting fingers: = c(“cf”, “counting finger”, “counting fingers”, “finger count”, “count fingers”)","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"custom-values-for-qualitative-entries","dir":"Articles","previous_headings":"Visual acuity > Qualitative visual acuity measures","what":"Custom values for qualitative entries:","title":"eye","text":"define values qualitative entries, need pass names list names c(“cf”, “hm”, “nlp”, “lp”) - order - quali_values. accepts values can reasonably converted numeric values converts logMAR. want convert different notation, need call va() second time.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"examples","dir":"Articles","previous_headings":"Visual acuity","what":"Examples","title":"eye","text":"","code":"## automatic detection of VA notation and converting to logMAR by default x <- c(23, 56, 74, 58) ## ETDRS letters to_logmar(x) # wrapper of va(x, to = \"logmar\") #> From etdrs #> [1] 1.24 0.58 0.22 0.54  ## ... or convert to snellen to_snellen(x) # wrapper of va(x, to = \"snellen\")  #> From etdrs #> [1] \"20/320\" \"20/80\"  \"20/32\"  \"20/70\"  ## eye knows metric as well  to_snellen(x, type = \"m\")  #> From etdrs #> [1] \"6/96\"  \"6/24\"  \"6/9.6\" \"6/21\"  ## And the decimal snellen notation, so much loved in Germany to_snellen(x, type = \"dec\")  #> From etdrs #> [1] \"0.062\" \"0.25\"  \"0.625\" \"0.3\"  ## Remove weird entries and implausible entries depending on the VA choice x <- c(\"NLP\", \"0.8\", \"34\", \"3/60\", \"2/200\", \"20/50\", \"  \", \".\", \"-\", \"NULL\")  to_snellen(x) #> From snellen. Could be snellen, logmar, snellendec, etdrs #> 6x NA introduced for: 0.8, 34,   , ., -, NULL #>  [1] \"20/20000\" NA         NA         \"20/400\"   \"20/2000\"  \"20/50\"    #>  [7] NA         NA         NA         NA to_snellen(x, from = \"snellendec\") #> 8x NA introduced for: 34, 3/60, 2/200, 20/50,   , ., -, NULL #>  [1] \"20/20000\" \"20/25\"    NA         NA         NA         NA         #>  [7] NA         NA         NA         NA to_snellen(x, from = \"etdrs\") #> 8x NA introduced for: 0.8, 3/60, 2/200, 20/50,   , ., -, NULL #>  [1] \"20/20000\" NA         \"20/200\"   NA         NA         NA         #>  [7] NA         NA         NA         NA to_snellen(x, from = \"logmar\") #> 8x NA introduced for: 34, 3/60, 2/200, 20/50,   , ., -, NULL #>  [1] \"20/20000\" \"20/125\"   NA         NA         NA         NA         #>  [7] NA         NA         NA         NA  ## \"plus/minus\" entries are converted to the most probable threshold (any spaces allowed)  x <- c(\"20/200 - 1\", \"6/6-2\", \"20/50 + 3\", \"6/6-4\", \"20/33 + 4\") to_logmar(x) #> From snellen #> [1] 1.0 0.0 0.3 0.1 0.1  ## or evaluating them as logmar values (each optotype equals 0.02 logmar) to_logmar(x, smallstep = TRUE) #> From snellen #> [1] 1.02 0.04 0.34 0.08 0.14  ## or you can also decide to completely ignore them (converting them to the nearest snellen value in the VA chart) to_snellen(x, noplus = TRUE) #> From snellen #> [1] \"20/200\" \"20/20\"  \"20/50\"  \"20/20\"  \"20/32\"  ## recognises various ways to write qualitative values such as \"hand motion\" y <- c(23, \"20/50\", \"hand motion\", \"hm\", \"count fingers\", \"no light perception\", \"nlp\", \"nonsense\") va(y) #> 1x NA introduced for: nonsense #> [1] \"23\"    \"20/50\" \"hm\"    \"hm\"    \"cf\"    \"nlp\"   \"nlp\"   NA  ## you can set custom strings that are recognised as values set_eye_strings(nlp = c(\"nonsense\", \"nlp\", \"no light perception\")) va(y) #> [1] \"23\"    \"20/50\" \"hm\"    \"hm\"    \"cf\"    \"nlp\"   \"nlp\"   \"nlp\"  ## reset to default with an empty call to set_eye_strings set_eye_strings() va(y) #> 1x NA introduced for: nonsense #> [1] \"23\"    \"20/50\" \"hm\"    \"hm\"    \"cf\"    \"nlp\"   \"nlp\"   NA  ## use your own custom values for qualitative entries to_logmar(y) #> From snellen. Could be snellen, logmar, snellendec, etdrs #> 2x NA introduced for: 23, nonsense #> [1]  NA 0.4 2.3 2.3 2.0 3.0 3.0  NA to_logmar(y, quali_values = list(cf = 2, hm = 3, lp = 4, nlp = 6 )) #> From snellen. Could be snellen, logmar, snellendec, etdrs #> 2x NA introduced for: 23, nonsense #> [1]  NA 0.4 3.0 3.0 2.0 6.0 6.0  NA"},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"recode","dir":"Articles","previous_headings":"","what":"recodeye","title":"eye","text":"Makes recoding eye variables easy. following codes recognized: integer coding 0:1 1:2, right eye lower number. right eyes: c(“r”, “re”, “od”, “right”) left eyes: c(“l”, “le”, “os”, “left”) eyes: c(“b”, “”, “ou”) different codes, can change recognized strings eyestrings argument, needs list. remember put strings right eyes first, pass named list. can also globally change recognized codes set_eye_strings()","code":"x <- c(\"r\", \"re\", \"od\", \"right\", \"l\", \"le\", \"os\", \"left\", \"both\", \"ou\") recodeye(x) #>  [1] \"r\" \"r\" \"r\" \"r\" \"l\" \"l\" \"l\" \"l\" \"b\" \"b\"  ## chose the resulting codes recodeye(x, to = c(\"od\", \"os\", \"ou\")) #>  [1] \"od\" \"od\" \"od\" \"od\" \"os\" \"os\" \"os\" \"os\" \"ou\" \"ou\"  ## Numeric codes 0:1/ 1:2 are recognized  x <- 1:2 recodeye(x) #> Eyes coded 1:2. Interpreting r = 1 #> [1] \"r\" \"l\"  ## with weird missing values x <- c(1:2, \".\", NA, \"\", \"    \") recodeye(x) #> Missing values and/or meaningless strings contained #> Eyes coded 1:2. Interpreting r = 1 #> [1] \"r\" \"l\" NA  NA  NA  NA  ## If you are using different strings to code for eyes, e.g., you are using a different language, you can change this either with the \"eyestrings\" argument french <- c(\"OD\", \"droit\", \"gauche\", \"OG\") recodeye(french, eyestrings = list(r = c(\"droit\", \"od\"), l = c(\"gauche\", \"og\"))) #> [1] \"r\" \"r\" \"l\" \"l\"  ## or change it more globally with `set_eye_strings` set_eye_strings(right = c(\"droit\", \"od\"), left = c(\"gauche\", \"og\")) recodeye(french) #> [1] \"r\" \"r\" \"l\" \"l\"  # to restore the default, call set_eye_strings empty set_eye_strings()"},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"eyes","dir":"Articles","previous_headings":"","what":"Counting patients and eyes","title":"eye","text":"eyes offers simple tool counting patients eyes. return list object gives easy access data. important step eyes guessing columns identify patients eyes. myop course blink, specific column naming required reliable automatic detection patient eye column(s) ( see Names codes) arguments id eye arguments overrule name guessing respective columns.","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"patient-id-columns","dir":"Articles","previous_headings":"Counting patients and eyes > Guessing","what":"patient ID columns:","title":"eye","text":"names can case. First, eyes looking names contain strings “pat” “id” (order doesn’t matter) can change codes set_eye_strings() Next, look columns plainly called “ID” Last, search names contain either “pat” “id”","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"eye-variable-column","dir":"Articles","previous_headings":"Counting patients and eyes > Guessing","what":"eye variable column:","title":"eye","text":"names can case. eyes looks columns contain string either “eye” “eyes” - can change codes set_eye_strings() columns full string “eye” “eyes” given precedence","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"counting","dir":"Articles","previous_headings":"Counting patients and eyes","what":"Counting","title":"eye","text":"counting eyes, eyes need coded commonly used ways. can use recodeye convenient recoding. eyes recognizes integer coding 0:1 1:2, right lower number. , arguably appropriate R, character coding categorical variable: right eyes: c(“r”, “re”, “od”, “right”) left eyes: c(“l”, “le”, “os”, “left”) eyes: c(“b”, “”, “ou”) can change codes set_eye_strings()","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"report","dir":"Articles","previous_headings":"Counting patients and eyes","what":"Report:","title":"eye","text":"eyes also include convenience function turn count text. intended integration rmarkdown reports, easy copy / pasting. eyes_to_string() parses output eyes text hood. Arguments eyes_to_string passed via …: english numbers written plain english: choose “small” numbers till 12, “” (numbers), “none” (string!) none caps First number capital letter eyestr create string can paste report. name chosen ’s contraction “eyes” “strings” ’s tiny bit easier type “eyetxt”.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"use-in-rmarkdown","dir":"Articles","previous_headings":"Counting patients and eyes > Report:","what":"Use in rmarkdown","title":"eye","text":"eyestr designed use rmarkdown mind, explicitly use inline. can change way numbers converted english english argument. default, numbers smaller equal 12 real English, numbers … numbers. can capitalise first number caps argument. analyzed `r eyestr(amd2)` gives: analyzed 3357 eyes 3357 patients analyzed `r eyestr(head(amd2, 100))`gives: analyzed eleven eyes eleven patients analyzed `r eyestr(amd2, english = \"\")` gives: analyzed three thousand three hundred fifty-seven eyes three thousand three hundred fifty-seven patients `r eyestr(head(amd2, 100), caps = TRUE)` analyzed gives: Eleven eyes eleven patients analyzed analyzed `r eyestr(head(amd2, 100), english = \"none\")` gives: analyzed 11 eyes 11 patients","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"reshape-eye-data","dir":"Articles","previous_headings":"","what":"Reshape eye data","title":"eye","text":"convenience, data often entered “wide” format: eye research, often two columns variable, one column eye. may necessary data formal specific questions. However, “eye” also variable (dimension observation), can also stored separate column. Indeed, experience R often needs eyes single column, variable dedicated column.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"myop","dir":"Articles","previous_headings":"Reshape eye data","what":"myop","title":"eye","text":"Reshaping many columns can daunting task, myop() makes easier. remove duplicate rows, pivot eye variable one column generate single column variable, thus shaping data specific types analysis. example, eight columns store data four variables right left eyes pivoted 5 columns (one eye column four variable columns)). See also Examples. eyes(), myop() requires specific data format. See names codes already column called “eye” “eyes”, myop make changes - data already assumed long format. still variables spread two columns right left eyes, example messy data. solution remove simply rename “eye” column let myop work. However, need careful cases resulting data frame plausible. Learn tidy data.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"make-myop-work","dir":"Articles","previous_headings":"Reshape eye data > myop","what":"Make myop work","title":"eye","text":"myop work reliably adhere following: Right eyes: “r”, “re”, “od”, “right” Left eyes: “l”, “le”, “os”, “left” strings eyes need separated period underscores. (Periods replaced underscores). work: “va_r”, “right_morningpressure”, “night_iop.le”, “gat_os_postop” fail: “VAr”, “rightmorningPressure”, “night_IOPle”, “gatOSpostop” exception one column eye. column names can consist “eye strings” . case, argument var used name resulting variable. eye columns data (actually happen), myop create identifiers row position. Please always check result plausibility. Depending lot data entered, results become quite surprising. basically nearly infinite amount possible combinations enter data, likely myop able deal .","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"myop-under-the-hood","dir":"Articles","previous_headings":"Reshape eye data > myop","what":"myop under the hood","title":"eye","text":"myop() basically runs three main steps: Removing duplicates Replacing “.” “_” Re-arranging recoding substrings way strings eyes always appear first position. recoded “r” “l” columns eye string first position selected pivoted two long colums (key value) using tidyr::pivot_longer. key column split position eye column variable column. variable value columns pivoted wide tidyr::pivot_wider.","code":"wide1 <- data.frame(id = letters[1:3],  r = 11:13 , l = 14:16) iop_wide <- data.frame(id = letters[1:3], iop_r = 11:13, iop_l = 14:16) ## Mildly messy data frame with several variables spread over two columns: wide_df <- data.frame(   id = letters[1:4],    surgery_right = c(\"TE\", \"TE\", \"SLT\", \"SLT\"),   surgery_left = c(\"TE\", \"TE\", \"TE\", \"SLT\"),   iop_r_preop = 21:24, iop_r_postop = 11:14,   iop_l_preop = 31:34, iop_l_postop = 11:14,    va_r_preop = 41:44, va_r_postop = 45:48,   va_l_preop = 41:44, va_l_postop = 45:48 ) ## the variable has not been exactly named, (but it is probably IOP data),  ## you can specify the dimension with the var argument  myop(wide1, var = \"iop\") #> # A tibble: 6 × 3 #>   id    eye   iop   #>   <chr> <chr> <chr> #> 1 a     right 11    #> 2 a     left  14    #> 3 b     right 12    #> 4 b     left  15    #> 5 c     right 13    #> 6 c     left  16  ## If the dimension is already part of the column names, this is not necessary.  myop(iop_wide) #> # A tibble: 6 × 3 #>   id    eye   iop   #>   <chr> <chr> <chr> #> 1 a     right 11    #> 2 a     left  14    #> 3 b     right 12    #> 4 b     left  15    #> 5 c     right 13    #> 6 c     left  16  ## myop deals with this in a breeze: myop(wide_df) #> # A tibble: 8 × 7 #>   id    eye   surgery iop_preop iop_postop va_preop va_postop #>   <chr> <chr> <chr>   <chr>     <chr>      <chr>    <chr>     #> 1 a     right TE      21        11         41       45        #> 2 a     left  TE      31        11         41       45        #> 3 b     right TE      22        12         42       46        #> 4 b     left  TE      32        12         42       46        #> 5 c     right SLT     23        13         43       47        #> 6 c     left  TE      33        13         43       47        #> 7 d     right SLT     24        14         44       48        #> 8 d     left  SLT     34        14         44       48"},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"hyperop","dir":"Articles","previous_headings":"Reshape eye data","what":"hyperop","title":"eye","text":"Basically opposite myop() - slightly intelligent wrapper around tidyr::pivot_longer() tidyr::pivot_wider(). find eye column, unify codes eyes (“r” “l”) pivot columns wide, specified “cols”. , good names tidy data always help! cols argument takes tidyselection. Read tidyselection","code":"myop_df <- myop(wide_df) hyperop(myop_df, cols = matches(\"va|iop\")) #> # A tibble: 5 × 10 #>   id    surgery r_iop_preop r_iop_postop r_va_preop r_va_postop l_iop_preop #>   <chr> <chr>   <chr>       <chr>        <chr>      <chr>       <chr>       #> 1 a     TE      21          11           41         45          31          #> 2 b     TE      22          12           42         46          32          #> 3 c     SLT     23          13           43         47          NA          #> 4 c     TE      NA          NA           NA         NA          33          #> 5 d     SLT     24          14           44         48          34          #> # ℹ 3 more variables: l_iop_postop <chr>, l_va_preop <chr>, l_va_postop <chr>"},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"blink","dir":"Articles","previous_headings":"","what":"blink","title":"eye","text":"Although kind nice, blink nerdy extra likely used much. Therefore decided stop work . left package . See data blink eye blink() just wrapper around myop(), eyes(), va() reveal(). look VA IOP columns provide summary stats entire cohort right left eyes VA IOP variable. , , requires certain format names codes - See Names Codes","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"work-under-the-hood","dir":"Articles","previous_headings":"blink","what":"Work under the hood","title":"eye","text":"Removing duplicates Identification index VA IOP columns Logical columns Character columns coding Snellen fractions “qualitative visual acuity” unique values range vector defined argument “fct_level”. removed likely categorical codes. columns VA IOP contain 0 1 example (unlikely, impossible), can just set fct_level = \"x\" arbitrary value. Rename data names myop_rename() sort_substr() Getting new names based indices columns Creating vector “expected new names” summary myopization Myopizing possible Converting VA vectors logMAR Applying reveal() VA IOP columns. can imagine, lot steps rely hugely reasonable naming columns makes function unfortunately bit fragile. However, adhere naming conventions, blink (myop) great job . happy automatic column selection, can manually select VA IOP columns arguments va_cols iop_cols. accept tidyselection. personally find starts_with, ends_with, contains() general matches() useful.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"examples-1","dir":"Articles","previous_headings":"blink","what":"Examples","title":"eye","text":"","code":"blink(wide_df) #> The lifecycle of blink() has expired. It will no longer be #>   maintained, but will be kept in the package. #> From etdrs #> From etdrs #>  #> ── blink ─────────────────────────────────────────────────────────────────────── #> ══ Data ════════════════════════════════ #> # A tibble: 8 × 7 #>   id    eye   surgery iop_preop iop_postop va_preop va_postop #>   <chr> <chr> <chr>   <chr>     <chr>      <logmar> <logmar>  #> 1 a     right TE      21        11         0.88     0.80      #> 2 a     left  TE      31        11         0.88     0.80      #> 3 b     right TE      22        12         0.86     0.78      #> 4 b     left  TE      32        12         0.86     0.78      #> 5 c     right SLT     23        13         0.84     0.76      #> 6 c     left  TE      33        13         0.84     0.76      #> 7 d     right SLT     24        14         0.82     0.74      #> 8 d     left  SLT     34        14         0.82     0.74      #>  #> ══ Count of patient and eyes ═══════════ #> ══ Counts ═══════════════ #>    id  eyes right  left  #>     4     8     4     4  #>  #> ══ Visual acuity ═══════════════════════ #>  #> ── $VA_total (all eyes) #>         var mean sd n min max #> 1  va_preop  0.8  0 8 0.8 0.9 #> 2 va_postop  0.8  0 8 0.7 0.8 #>  #> ── $VA_eyes (right and left eyes) #>   var1 var2  var3  var4       var mean sd n min max #> 1 left left right right  va_preop  0.8  0 4 0.8 0.9 #> 2 left left right right va_postop  0.8  0 4 0.7 0.8 #> 3 left left right right  va_preop  0.8  0 4 0.8 0.9 #> 4 left left right right va_postop  0.8  0 4 0.7 0.8 #>  #> ══ Intraocular pressure ════════════════ #>  #> ── $IOP_total (all eyes) #>          var mean  sd n min max #> 1  iop_preop 27.5 5.5 8  21  34 #> 2 iop_postop 12.5 1.2 8  11  14 #>  #> ── $IOP_eyes (right and left eyes) #>   var1 var2  var3  var4        var mean  sd n min max #> 1 left left right right  iop_preop 32.5 1.3 4  31  34 #> 2 left left right right iop_postop 12.5 1.3 4  11  14 #> 3 left left right right  iop_preop 22.5 1.3 4  21  24 #> 4 left left right right iop_postop 12.5 1.3 4  11  14  blink(amd) #> The lifecycle of blink() has expired. It will no longer be #>   maintained, but will be kept in the package. #> Warning: Data seems already myopic - no changes made. ?myop for help #> From etdrs. Could be etdrs, logmar, snellendec #> Unclear which is the eye column. Counting id only. #> Specify eye column with \"eye_col\" argument #>  #> ── blink ─────────────────────────────────────────────────────────────────────── #> ══ Data ════════════════════════════════ #> # A tibble: 118,255 × 11 #>    patid sex   age   avdays_induc ethnicity loaded  time injgiven va     regimen #>    <chr> <chr> <fct>        <dbl> <chr>     <lgl>  <int> <lgl>    <logm> <chr>   #>  1 id_1  m     60-69           28 se_asian  TRUE       0 TRUE     0.30   ranibi… #>  2 id_1  m     60-69           28 se_asian  TRUE      28 TRUE     0.30   ranibi… #>  3 id_1  m     60-69           28 se_asian  TRUE      56 TRUE     0.30   ranibi… #>  4 id_1  m     60-69           28 se_asian  TRUE      91 TRUE     0.40   ranibi… #>  5 id_1  m     60-69           28 se_asian  TRUE     131 TRUE     0.46   ranibi… #>  6 id_1  m     60-69           28 se_asian  TRUE     173 TRUE     0.40   ranibi… #>  7 id_1  m     60-69           28 se_asian  TRUE     236 TRUE     0.50   ranibi… #>  8 id_1  m     60-69           28 se_asian  TRUE     278 TRUE     0.50   ranibi… #>  9 id_1  m     60-69           28 se_asian  TRUE     411 TRUE     0.60   ranibi… #> 10 id_1  m     60-69           28 se_asian  TRUE     453 TRUE     0.54   ranibi… #> # ℹ 118,245 more rows #> # ℹ 1 more variable: pre2013 <lgl> #>  #> ══ Count of patient and eyes ═══════════ #> ══ Counts ═══════════════ #>   id  #> 7802  #>  #> ══ Visual acuity ═══════════════════════ #>  #> ── $VA_total (all eyes) #>   var mean  sd      n  min max #> 1  va  0.5 0.4 116530 -0.3 2.3 #>  #> ── $VA_eyes (right and left eyes) #> NULL #>  #> ══ Intraocular pressure ════════════════ #>  #> ── $IOP_total (all eyes) #> NULL #>  #> ── $IOP_eyes (right and left eyes) #> NULL"},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"names-and-codes","dir":"Articles","previous_headings":"","what":"Names and codes","title":"eye","text":"eye works smoother tidy data, good names (package , really!)","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"tidy-data","dir":"Articles","previous_headings":"Names and codes","what":"Tidy data","title":"eye","text":"basic principle tidy data : one column dimension one row observation. Learn tidy data. chapter explains can improve names codes eye work like charm.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"how-do-i-rename-columns-in-r","dir":"Articles","previous_headings":"Names and codes","what":"How do I rename columns in R?","title":"eye","text":"started R, found challenging rename columns found following methods helpful: ’ve got data frame unfortunate names: can rename names easily: rename specific columns, even sure exact position: even methods, found two threads Stackoverflow helpful: Rename single column Rename columns named vector","code":"name_mess <- data.frame(name = \"a\", oculus = \"r\", eyepressure = 14, vision = 0.2) names(name_mess) #> [1] \"name\"        \"oculus\"      \"eyepressure\" \"vision\" names(name_mess) <- c(\"patID\", \"eye\", \"IOP\", \"VA\") names(name_mess) #> [1] \"patID\" \"eye\"   \"IOP\"   \"VA\" ## if you only want to rename one or a few columns:  names(name_mess)[names(name_mess) %in% c(\"name\", \"vision\")] <- c(\"patID\", \"VA\") names(name_mess) #> [1] \"patID\"       \"oculus\"      \"eyepressure\" \"VA\""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"tips-and-rules-for-naming","dir":"Articles","previous_headings":"Names and codes","what":"Tips and rules for naming:","title":"eye","text":"Don’t creative names! eyes: “r”, “re”, “od”, “right” - numeric coding r:l = 0:1 1:2 Visual acuity: “VA”, “BCVA”, “Acuity” Intraocular pressure: “IOP”, “GAT”, “NCT”, “pressure” Patient identifier: “pat”, “patient”, “ID” (ideally : “patientID” “patID”) spaces! use numeric coding eyes column names Separate eye VA IOP codes underscores (“bcva_l_preop”, “VA_r”, “left_va”, “IOP_re”) Keep names short Don’t use underscores don’t need : Consider section divided underscore relevant characteristic variable. E.g., “preop” instead “pre_op”, simply “VA” instead “VA_ETDRS_Letters”","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"name-examples","dir":"Articles","previous_headings":"Names and codes","what":"Name examples","title":"eye","text":"Good names (eye work nicely) OK names (eye work) Bad names (eye fail)","code":"## right and left eyes have common codes ## information on the tested dimension is included (\"iop\") ## VA and eye strings are separated by underscores ## No unnecessary underscores. names(wide_df) #>  [1] \"id\"            \"surgery_right\" \"surgery_left\"  \"iop_r_preop\"   #>  [5] \"iop_r_postop\"  \"iop_l_preop\"   \"iop_l_postop\"  \"va_r_preop\"    #>  [9] \"va_r_postop\"   \"va_l_preop\"    \"va_l_postop\"  names(iop_wide)  #> [1] \"id\"    \"iop_r\" \"iop_l\" ## Id and Eye are common names, there are no spaces ## VA is separated from the rest with an underscore ## BUT:  ## The names are quite long  ## There is an unnecessary underscore (etdrs are always letters). Better just \"VA\" c(\"Id\", \"Eye\", \"FollowupDays\", \"BaselineAge\", \"Gender\", \"VA_ETDRS_Letters\",  \"InjectionNumber\") #> [1] \"Id\"               \"Eye\"              \"FollowupDays\"     \"BaselineAge\"      #> [5] \"Gender\"           \"VA_ETDRS_Letters\" \"InjectionNumber\"  ## All names are commonly used (good!) ## But which dimension of \"r\"/\"l\" are we exactly looking at?  c(\"id\", \"r\",  \"l\") #> [1] \"id\" \"r\"  \"l\" ## VA/IOP not separated with underscore ## `eye` won't be able to recognize IOP and VA columns c(\"id\", \"iopr\", \"iopl\", \"VAr\", \"VAl\") #> [1] \"id\"   \"iopr\" \"iopl\" \"VAr\"  \"VAl\"  ## A human may think this is clear ## But `eye` will fail to understand those variable names c(\"person\", \"goldmann\", \"vision\") #> [1] \"person\"   \"goldmann\" \"vision\"  ## Not even clear to humans c(\"var1\", \"var2\", \"var3\") #> [1] \"var1\" \"var2\" \"var3\""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"reveal","dir":"Articles","previous_headings":"","what":"Reveal common statistics","title":"eye","text":"reveal() offers simple API show common summary statistics numeric columns data frame. reveal() basically slightly complicated wrapper around mean(), sd(), length(), min() max() (na.rm = TRUE length() counting non-NA values). really intended replace awesome data exploration packages / functions skimr::skim, likely remain focussed summarizing numerical data . uses S3 generic hood methods atomic vectors, data frames, lists either atomic vectors data frames. Character vectors omitted (give warning done ). reveal() takes grouping argument returns vector atomic vectors data frame lists.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"examples-2","dir":"Articles","previous_headings":"Reveal common statistics","what":"Examples","title":"eye","text":"","code":"clean_df <- myop(wide_df) reveal(clean_df) #>          var mean  sd n min max #> 1  iop_preop 27.5 5.5 8  21  34 #> 2 iop_postop 12.5 1.2 8  11  14 #> 3   va_preop 42.5 1.2 8  41  44 #> 4  va_postop 46.5 1.2 8  45  48  reveal(clean_df, by = \"eye\") #>   var1 var2 var3 var4  var5  var6  var7  var8        var mean  sd n min max #> 1 left left left left right right right right  iop_preop 32.5 1.3 4  31  34 #> 2 left left left left right right right right iop_postop 12.5 1.3 4  11  14 #> 3 left left left left right right right right   va_preop 42.5 1.3 4  41  44 #> 4 left left left left right right right right  va_postop 46.5 1.3 4  45  48 #> 5 left left left left right right right right  iop_preop 22.5 1.3 4  21  24 #> 6 left left left left right right right right iop_postop 12.5 1.3 4  11  14 #> 7 left left left left right right right right   va_preop 42.5 1.3 4  41  44 #> 8 left left left left right right right right  va_postop 46.5 1.3 4  45  48  reveal(clean_df, by = c(\"eye\", \"surgery\")) #>    var1 var2 var3 var4  var5  var6  var7  var8 var9 var10 var11 var12 var13 #> 1  left left left left right right right right left  left  left  left right #> 2  left left left left right right right right left  left  left  left right #> 3  left left left left right right right right left  left  left  left right #> 4  left left left left right right right right left  left  left  left right #> 5  left left left left right right right right left  left  left  left right #> 6  left left left left right right right right left  left  left  left right #> 7  left left left left right right right right left  left  left  left right #> 8  left left left left right right right right left  left  left  left right #> 9  left left left left right right right right left  left  left  left right #> 10 left left left left right right right right left  left  left  left right #> 11 left left left left right right right right left  left  left  left right #> 12 left left left left right right right right left  left  left  left right #> 13 left left left left right right right right left  left  left  left right #> 14 left left left left right right right right left  left  left  left right #> 15 left left left left right right right right left  left  left  left right #> 16 left left left left right right right right left  left  left  left right #>    var14 var15 var16 var17 var18 var19 var20 var21 var22 var23 var24 var25 #> 1  right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 2  right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 3  right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 4  right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 5  right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 6  right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 7  right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 8  right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 9  right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 10 right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 11 right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 12 right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 13 right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 14 right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 15 right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #> 16 right right right   SLT   SLT   SLT   SLT   SLT   SLT   SLT   SLT    TE #>    var26 var27 var28 var29 var30 var31 var32        var mean  sd n min max #> 1     TE    TE    TE    TE    TE    TE    TE  iop_preop 34.0  NA 1  34  34 #> 2     TE    TE    TE    TE    TE    TE    TE iop_postop 14.0  NA 1  14  14 #> 3     TE    TE    TE    TE    TE    TE    TE   va_preop 44.0  NA 1  44  44 #> 4     TE    TE    TE    TE    TE    TE    TE  va_postop 48.0  NA 1  48  48 #> 5     TE    TE    TE    TE    TE    TE    TE  iop_preop 23.5 0.7 2  23  24 #> 6     TE    TE    TE    TE    TE    TE    TE iop_postop 13.5 0.7 2  13  14 #> 7     TE    TE    TE    TE    TE    TE    TE   va_preop 43.5 0.7 2  43  44 #> 8     TE    TE    TE    TE    TE    TE    TE  va_postop 47.5 0.7 2  47  48 #> 9     TE    TE    TE    TE    TE    TE    TE  iop_preop 32.0 1.0 3  31  33 #> 10    TE    TE    TE    TE    TE    TE    TE iop_postop 12.0 1.0 3  11  13 #> 11    TE    TE    TE    TE    TE    TE    TE   va_preop 42.0 1.0 3  41  43 #> 12    TE    TE    TE    TE    TE    TE    TE  va_postop 46.0 1.0 3  45  47 #> 13    TE    TE    TE    TE    TE    TE    TE  iop_preop 21.5 0.7 2  21  22 #> 14    TE    TE    TE    TE    TE    TE    TE iop_postop 11.5 0.7 2  11  12 #> 15    TE    TE    TE    TE    TE    TE    TE   va_preop 41.5 0.7 2  41  42 #> 16    TE    TE    TE    TE    TE    TE    TE  va_postop 45.5 0.7 2  45  46"},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"getage","dir":"Articles","previous_headings":"","what":"Calculate age","title":"eye","text":"simple function require much explanation. However, may noteworthy mention subtle distinction periods durations, idiosyncrasy time measurements well explained thread.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"examples-3","dir":"Articles","previous_headings":"Calculate age","what":"Examples","title":"eye","text":"","code":"dob <- c(\"1984-10-16\", \"2000-01-01\")  ## If no second date given, the age today getage(dob) #> [1] 40.9 25.7  ## If the second argument is specified, the age until then getage(dob, \"2000-01-01\")                                                     #> [1] 15.2  0.0"},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"important-notes","dir":"Articles","previous_headings":"","what":"Important notes","title":"eye","text":"assume responsability data analysis. Please always keep critical mind working data - get results seem implausible, may chance data unfortunate shape eye may suitable.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"va-conversion-chart","dir":"Articles","previous_headings":"Important notes","what":"VA conversion chart","title":"eye","text":"chart included package va_chart","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"eye","text":"Thanks Alasdair Warwick, Aaron Lee, Tim Yap, Siegfried Wagner Abraham Olvera great suggestions, testing code review. Pearse Keane, Dun Jack Fu, Katrin Fasler Christoph Kern contribution open source data Thanks Antoine Fabri contribution getage() Thanks Hadley Wickham developers tidyverse packages packages roxygen2, usethis, testthis devtools, eye heavily relies.","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"eye","text":"Michael Bach’s homepage Michael Bach NLP LP","code":""},{"path":"https://github.com/tjebo/eye/articles/eye.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"eye","text":"Beck, Roy W, Pamela S Moke, Andrew H Turpin, Frederick L Ferris, John Paul SanGiovanni, Chris Johnson, Eileen E Birch, et al. 2003. “Computerized Method Visual Acuity Testing.” American Journal Ophthalmology 135 (2). Elsevier BV: 194–205. https://doi.org/10.1016/s0002-9394(02)01825-1. Gregori, Ninel Z, William Feuer, Philip J Rosenfeld. 2010. “Novel Method Analyzing Snellen Visual Acuity Measurements.” Retina 30 (7). Ovid Technologies (Wolters Kluwer Health): 1046–50. https://doi.org/10.1097/iae.0b013e3181d87e04. Holladay, Jack T. 2004. “Visual Acuity Measurements.” Journal Cataract Refractive Surgery 30 (2): 287–90. https://doi.org/10.1016/j.jcrs.2004.01.014. Schulze-Bonsel, Kilian, Nicolas Feltgen, Hermann Burau, Lutz Hansen, Michael Bach. 2006. “Visual Acuities ‘Hand Motion’ ‘Counting Fingers’ Can Quantified Freiburg Visual Acuity Test.” Investigative Ophthalmology & Visual Science 47 (3): 1236–40. https://doi.org/10.1167/iovs.05-0981.","code":""},{"path":"https://github.com/tjebo/eye/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tjebo Heeren. Author, maintainer. Antoine Fabri. Contributor.","code":""},{"path":"https://github.com/tjebo/eye/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"T.F.C. Heeren. eye package R: tool ophthalmic data analysis, London, UK, 2021.","code":"@Manual{,   title = {The eye package for R: A tool to facilitate analysis of ophthalmic data},   author = {Tjebo F.C. Heeren},   year = {2021},   address = {London, UK},   note = {version 1.3},   url = {https://github.com/tjebo/eye}, }"},{"path":"https://github.com/tjebo/eye/index.html","id":"eye","dir":"","previous_headings":"","what":"Analysis of Eye Data","title":"Analysis of Eye Data","text":"See eye","code":""},{"path":"https://github.com/tjebo/eye/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Analysis of Eye Data","text":"eye dedicated facilitate common tasks ophthalmic research.","code":""},{"path":"https://github.com/tjebo/eye/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Analysis of Eye Data","text":"Handling visual acuity notations Super easy count subjects eyes, smooth integration rmarkdown report Recode eye variable Reshape eye data - long wide Quick summary eye data Get common summary statistics Calculate age Clean NA equivalent entries","code":""},{"path":"https://github.com/tjebo/eye/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analysis of Eye Data","text":"can install eye CRAN using install.packages(\"eye\") can install development version github: recommend also get eyedata, package collating open source ophthalmic data sets.","code":"# install.packages(\"devtools\") devtools::install_github(\"tjebo/eye\")"},{"path":[]},{"path":"https://github.com/tjebo/eye/index.html","id":"visual-acuity","dir":"","previous_headings":"Details and examples","what":"Visual acuity","title":"Analysis of Eye Data","text":"Pesky visual acuity notations now matter past. Convert Snellen (meter/ feet/ decimal!), logMAR ETDRS. notation detected automatically converted desired notation. details see VA conversion. entries mixed notation, use va_mixed instead. can also decide simply “clean” VA vector va(x). remove entries certainly VA.","code":""},{"path":"https://github.com/tjebo/eye/index.html","id":"examples","dir":"","previous_headings":"Details and examples > Visual acuity","what":"Examples","title":"Analysis of Eye Data","text":"","code":"x <- c(23, 56, 74, 58) ## ETDRS letters to_logmar(x) # wrapper of va(x, to = \"logmar\") #> From etdrs #> [1] 1.24 0.58 0.22 0.54  ## ... or convert to snellen to_snellen(x)  #> From etdrs #> [1] \"20/320\" \"20/80\"  \"20/32\"  \"20/70\"  ## eye knows metric as well  to_snellen(x, type = \"m\")  #> From etdrs #> [1] \"6/96\"  \"6/24\"  \"6/9.6\" \"6/21\"  ## And the decimal snellen notation, so much loved in Germany to_snellen(x, type = \"dec\")  #> From etdrs #> [1] \"0.062\" \"0.25\"  \"0.625\" \"0.3\"  ## Remove weird entries and implausible entries depending on the VA choice x <- c(\"NLP\", \"0.8\", \"34\", \"3/60\", \"2/200\", \"20/50\", \"  \", \".\", \"-\", \"NULL\")  to_snellen(x) #> From snellen. Could be snellen, logmar, snellendec, etdrs #> 6x NA introduced for: 0.8, 34,   , ., -, NULL #>  [1] \"20/20000\" NA         NA         \"20/400\"   \"20/2000\"  \"20/50\"    #>  [7] NA         NA         NA         NA to_snellen(x, from = \"snellendec\") #> 8x NA introduced for: 34, 3/60, 2/200, 20/50,   , ., -, NULL #>  [1] \"20/20000\" \"20/25\"    NA         NA         NA         NA         #>  [7] NA         NA         NA         NA to_snellen(x, from = \"etdrs\") #> 8x NA introduced for: 0.8, 3/60, 2/200, 20/50,   , ., -, NULL #>  [1] \"20/20000\" NA         \"20/200\"   NA         NA         NA         #>  [7] NA         NA         NA         NA to_snellen(x, from = \"logmar\") #> 8x NA introduced for: 34, 3/60, 2/200, 20/50,   , ., -, NULL #>  [1] \"20/20000\" \"20/125\"   NA         NA         NA         NA         #>  [7] NA         NA         NA         NA  ## \"plus/minus\" entries are converted to the most probable threshold (any spaces allowed)  x <- c(\"20/200 - 1\", \"6/6-2\", \"20/50 + 3\", \"6/6-4\", \"20/33 + 4\") to_logmar(x) #> From snellen #> [1] 1.0 0.0 0.3 0.1 0.1  ## or evaluating them as logmar values (each optotype equals 0.02 logmar) to_logmar(x, smallstep = TRUE) #> From snellen #> [1] 1.02 0.04 0.34 0.08 0.14  ## or you can also decide to completely ignore them (converting them to the nearest snellen value in the VA chart, or if you convert to logMAR, rounding to the first digit) to_snellen(x, noplus = TRUE) #> From snellen #> [1] \"20/200\" \"20/20\"  \"20/50\"  \"20/20\"  \"20/32\"  # terribly mixed notations x <- c(NA, \"nlp\", 1:2, 1.1, -1, \"20/40\", \"4/6\", \"6/1000\", 34) va_mixed(x, to = \"snellen\") #>  [1] NA         \"20/20000\" \"20/2000\"  \"20/2000\"  \"20/250\"   NA         #>  [7] \"20/40\"    \"20/32\"    \"20/4000\"  \"20/200\"  # \"I only have snellen and snellen decimal notation in my data\" va_mixed(x, to = \"snellen\", possible = c(\"snellen\", \"snellendec\")) #>  [1] NA         \"20/20000\" \"20/20\"    \"20/10\"    \"20/20\"    NA         #>  [7] \"20/40\"    \"20/32\"    \"20/4000\"  NA  # \"I have snellen, logmar and etdrs in my data, and there is no etdrs value less than 4\" va_mixed(x, to = \"snellen\", possible = c(\"snellen\", \"logmar\", \"etdrs\")) #>  [1] NA         \"20/20000\" \"20/200\"   \"20/2000\"  \"20/250\"   NA         #>  [7] \"20/40\"    \"20/32\"    \"20/4000\"  \"20/200\"  ## just clean your entries without conversion va(x) #>  [1] NA       \"nlp\"    \"1\"      \"2\"      \"1.1\"    \"-1\"     \"20/40\"  \"4/6\"    #>  [9] \"6/1000\" \"34\"  ## recognises various ways to write qualitative values such as \"hand motion\" y <- c(23, \"20/50\", \"hand motion\", \"hm\", \"count fingers\", \"no light perception\", \"nlp\", \"nonsense\") va(y) #> 1x NA introduced for: nonsense #> [1] \"23\"    \"20/50\" \"hm\"    \"hm\"    \"cf\"    \"nlp\"   \"nlp\"   NA  ## you can set custom strings that are recognised as values set_eye_strings(nlp = c(\"nonsense\", \"nlp\", \"no light perception\")) va(y) #> [1] \"23\"    \"20/50\" \"hm\"    \"hm\"    \"cf\"    \"nlp\"   \"nlp\"   \"nlp\"  ## reset to default with an empty call to set_eye_strings set_eye_strings() va(y) #> 1x NA introduced for: nonsense #> [1] \"23\"    \"20/50\" \"hm\"    \"hm\"    \"cf\"    \"nlp\"   \"nlp\"   NA  ## use your own custom values for qualitative entries to_logmar(y) #> From snellen. Could be snellen, logmar, snellendec, etdrs #> 2x NA introduced for: 23, nonsense #> [1]  NA 0.4 2.3 2.3 2.0 3.0 3.0  NA to_logmar(y, quali_values = list(cf = 2, hm = 3, lp = 4, nlp = 6 )) #> From snellen. Could be snellen, logmar, snellendec, etdrs #> 2x NA introduced for: 23, nonsense #> [1]  NA 0.4 3.0 3.0 2.0 6.0 6.0  NA"},{"path":"https://github.com/tjebo/eye/index.html","id":"count-subjects-and-eyes","dir":"","previous_headings":"Details and examples","what":"Count subjects and eyes","title":"Analysis of Eye Data","text":"massive convenience function count subjects eyes. essentially returns list, stored data can easily accessed subsetting (e.g., $). can get subject IDs subset details = TRUE.","code":"library(eyedata) eyes(amd2) #> ══ Counts ═══════════════ #>    id  eyes right  left  #>  3357  3357  1681  1676  eyes(amd2)$right #> [1] 1681  eyes(amd2, details = TRUE) #> ══ $counts ══════════════════════════════════ #>    id  eyes right  left  both  #>  3357  3357  1681  1676     0  #>  #> ══ $id ══════════════════════════════════════ #> $right #> [1] \"id_100\"  \"id_1001\" \"id_1002\" \"id_1003\" \"id_1007\" \"id_1009\" #> # … with 1675 more subjects #>  #> $left #> [1] \"id_1\"    \"id_10\"   \"id_1000\" \"id_1004\" \"id_1005\" \"id_1006\" #> # … with 1670 more subjects #>  #> $both #> character(0)  head(eyes(amd2, details = TRUE)$id$right) #> [1] \"id_100\"  \"id_1001\" \"id_1002\" \"id_1003\" \"id_1007\" \"id_1009\""},{"path":"https://github.com/tjebo/eye/index.html","id":"smooth-integration-into-rmarkdown","dir":"","previous_headings":"Details and examples > Count subjects and eyes","what":"Smooth integration into rmarkdown","title":"Analysis of Eye Data","text":"eyestr designed use rmarkdown mind, explicitly use inline. can change way numbers converted english english argument. default, numbers smaller equal 12 real English, numbers … numbers. can capitalise first number caps argument.","code":""},{"path":"https://github.com/tjebo/eye/index.html","id":"recoding-the-eye-variable","dir":"","previous_headings":"Details and examples","what":"Recoding the eye variable","title":"Analysis of Eye Data","text":"Makes recoding eye variables easy. deals weird missing entries like \".\" \"\", \"N/\"","code":"x <- c(\"r\", \"re\", \"od\", \"right\", \"l\", \"le\", \"os\", \"left\", \"both\", \"ou\") recodeye(x) #>  [1] \"r\" \"r\" \"r\" \"r\" \"l\" \"l\" \"l\" \"l\" \"b\" \"b\"  ## chose the resulting codes recodeye(x, to = c(\"od\", \"os\", \"ou\")) #>  [1] \"od\" \"od\" \"od\" \"od\" \"os\" \"os\" \"os\" \"os\" \"ou\" \"ou\"  ## Numeric codes 0:1/ 1:2 are recognized  x <- 1:2 recodeye(x) #> Eyes coded 1:2. Interpreting r = 1 #> [1] \"r\" \"l\"  ## with weird missing values x <- c(1:2, \".\", NA, \"\", \"    \") recodeye(x) #> Missing values and/or meaningless strings contained #> Eyes coded 1:2. Interpreting r = 1 #> [1] \"r\" \"l\" NA  NA  NA  NA  ## If you are using different strings to code for eyes, e.g., you are using a different language, you can change this either with the \"eyestrings\" argument french <- c(\"OD\", \"droit\", \"gauche\", \"OG\") recodeye(french, eyestrings = list(r = c(\"droit\", \"od\"), l = c(\"gauche\", \"og\"))) #> [1] \"r\" \"r\" \"l\" \"l\"  ## or change it more globally with `set_eye_strings` set_eye_strings(right = c(\"droit\", \"od\"), left = c(\"gauche\", \"og\")) recodeye(french) #> [1] \"r\" \"r\" \"l\" \"l\"  # to restore the default, call set_eye_strings empty set_eye_strings()"},{"path":"https://github.com/tjebo/eye/index.html","id":"clean-na-entries","dir":"","previous_headings":"Details and examples","what":"Clean NA entries","title":"Analysis of Eye Data","text":"","code":"x <- c(\"a\", \"   \", \".\", \"-\", \"NULL\") tidyNA(x) #> [1] \"a\" NA  NA  NA  NA  # in addition to the default strings, a new string can be added tidyNA(x, string = \"a\") #> [1] NA NA NA NA NA  # or just remove the strings you want tidyNA(x, string = \"a\", defaultstrings = FALSE) #> [1] NA     \"   \"  \".\"    \"-\"    \"NULL\""},{"path":"https://github.com/tjebo/eye/index.html","id":"reveal","dir":"","previous_headings":"Details and examples","what":"reveal","title":"Analysis of Eye Data","text":"Show common statistics numeric columns, entire cohort aggregated group(s):","code":"reveal(iris) #>            var mean  sd   n min max #> 1 Sepal.Length  5.8 0.8 150 4.3 7.9 #> 2  Sepal.Width  3.1 0.4 150 2.0 4.4 #> 3 Petal.Length  3.8 1.8 150 1.0 6.9 #> 4  Petal.Width  1.2 0.8 150 0.1 2.5 #> 5      Species  2.0 0.8 150 1.0 3.0  reveal(iris, by = \"Species\") #can be several groups #>      var1   var2   var3   var4       var5       var6       var7       var8 #> 1  setosa setosa setosa setosa versicolor versicolor versicolor versicolor #> 2  setosa setosa setosa setosa versicolor versicolor versicolor versicolor #> 3  setosa setosa setosa setosa versicolor versicolor versicolor versicolor #> 4  setosa setosa setosa setosa versicolor versicolor versicolor versicolor #> 5  setosa setosa setosa setosa versicolor versicolor versicolor versicolor #> 6  setosa setosa setosa setosa versicolor versicolor versicolor versicolor #> 7  setosa setosa setosa setosa versicolor versicolor versicolor versicolor #> 8  setosa setosa setosa setosa versicolor versicolor versicolor versicolor #> 9  setosa setosa setosa setosa versicolor versicolor versicolor versicolor #> 10 setosa setosa setosa setosa versicolor versicolor versicolor versicolor #> 11 setosa setosa setosa setosa versicolor versicolor versicolor versicolor #> 12 setosa setosa setosa setosa versicolor versicolor versicolor versicolor #>         var9     var10     var11     var12          var mean  sd  n min max #> 1  virginica virginica virginica virginica Sepal.Length  5.0 0.4 50 4.3 5.8 #> 2  virginica virginica virginica virginica  Sepal.Width  3.4 0.4 50 2.3 4.4 #> 3  virginica virginica virginica virginica Petal.Length  1.5 0.2 50 1.0 1.9 #> 4  virginica virginica virginica virginica  Petal.Width  0.2 0.1 50 0.1 0.6 #> 5  virginica virginica virginica virginica Sepal.Length  5.9 0.5 50 4.9 7.0 #> 6  virginica virginica virginica virginica  Sepal.Width  2.8 0.3 50 2.0 3.4 #> 7  virginica virginica virginica virginica Petal.Length  4.3 0.5 50 3.0 5.1 #> 8  virginica virginica virginica virginica  Petal.Width  1.3 0.2 50 1.0 1.8 #> 9  virginica virginica virginica virginica Sepal.Length  6.6 0.6 50 4.9 7.9 #> 10 virginica virginica virginica virginica  Sepal.Width  3.0 0.3 50 2.2 3.8 #> 11 virginica virginica virginica virginica Petal.Length  5.6 0.6 50 4.5 6.9 #> 12 virginica virginica virginica virginica  Petal.Width  2.0 0.3 50 1.4 2.5"},{"path":"https://github.com/tjebo/eye/index.html","id":"getage","dir":"","previous_headings":"Details and examples","what":"getage","title":"Analysis of Eye Data","text":"Calculate age years, periods durations","code":"dob <- c(\"1984-10-16\", \"2000-01-01\")  ## If no second date given, the age today getage(dob) #> [1] 40.9 25.7 getage(dob, \"2000-01-01\")                                                     #> [1] 15.2  0.0"},{"path":"https://github.com/tjebo/eye/index.html","id":"myop","dir":"","previous_headings":"Details and examples","what":"myop","title":"Analysis of Eye Data","text":"Often enough, right eye / left eye columns one variable, e.g., IOP VA. may necessary data formal specific questions. However, “eye” also variable (dimension observation), can also stored separate column. data “longer”. Indeed, R requires exactly data shape many tasks: “eye[r/l]” separate column, eye-related variable (e.g., IOP VA) dedicated column. myop provides easy use API automatic reshape data “myop” format.","code":"## Simple data frame with one column for right eye and left eye. iop_wide <- data.frame(id = letters[1:3], iop_r = 11:13, iop_l = 14:16) iop_wide #>   id iop_r iop_l #> 1  a    11    14 #> 2  b    12    15 #> 3  c    13    16 myop(iop_wide) #> # A tibble: 6 × 3 #>   id    eye   iop   #>   <chr> <chr> <chr> #> 1 a     right 11    #> 2 a     left  14    #> 3 b     right 12    #> 4 b     left  15    #> 5 c     right 13    #> 6 c     left  16 wide_df <- data.frame(   id = letters[1:4],    surgery_right = c(\"TE\", \"TE\", \"SLT\", \"SLT\"),   surgery_left = c(\"TE\", \"TE\", \"TE\", \"SLT\"),   iop_r_preop = 21:24, iop_r_postop = 11:14,   iop_l_preop = 31:34, iop_l_postop = 11:14,    va_r_preop = 41:44, va_r_postop = 45:48,   va_l_preop = 41:44, va_l_postop = 45:48 ) myop_df <- myop(wide_df)  myop_df #> # A tibble: 8 × 7 #>   id    eye   surgery iop_preop iop_postop va_preop va_postop #>   <chr> <chr> <chr>   <chr>     <chr>      <chr>    <chr>     #> 1 a     right TE      21        11         41       45        #> 2 a     left  TE      31        11         41       45        #> 3 b     right TE      22        12         42       46        #> 4 b     left  TE      32        12         42       46        #> 5 c     right SLT     23        13         43       47        #> 6 c     left  TE      33        13         43       47        #> 7 d     right SLT     24        14         44       48        #> 8 d     left  SLT     34        14         44       48"},{"path":"https://github.com/tjebo/eye/index.html","id":"hyperop","dir":"","previous_headings":"Details and examples","what":"hyperop","title":"Analysis of Eye Data","text":"actually need certain eye-related variables spread two columns, hyperop() friend:","code":"hyperop(myop(iop_wide), iop) #> # A tibble: 3 × 3 #>   id    r_iop l_iop #>   <chr> <chr> <chr> #> 1 a     11    14    #> 2 b     12    15    #> 3 c     13    16  hyperop(myop_df, cols = matches(\"va|iop\")) #> # A tibble: 5 × 10 #>   id    surgery r_iop_preop r_iop_postop r_va_preop r_va_postop l_iop_preop #>   <chr> <chr>   <chr>       <chr>        <chr>      <chr>       <chr>       #> 1 a     TE      21          11           41         45          31          #> 2 b     TE      22          12           42         46          32          #> 3 c     SLT     23          13           43         47          <NA>        #> 4 c     TE      <NA>        <NA>         <NA>       <NA>        33          #> 5 d     SLT     24          14           44         48          34          #> # ℹ 3 more variables: l_iop_postop <chr>, l_va_preop <chr>, l_va_postop <chr>"},{"path":"https://github.com/tjebo/eye/index.html","id":"blink","dir":"","previous_headings":"Details and examples","what":"blink","title":"Analysis of Eye Data","text":"See data blink eye - wrapper around myop, eyes, va reveal. look VA IOP columns provide summary stats entire cohort right left eyes variable. requires certain format names codes","code":"blink(wide_df)"},{"path":"https://github.com/tjebo/eye/index.html","id":"names-and-codes","dir":"","previous_headings":"","what":"Names and codes","title":"Analysis of Eye Data","text":"eye works smoother tidy data (package , really!) important part tidy data good names. Learn tidy data.","code":""},{"path":"https://github.com/tjebo/eye/index.html","id":"tips-and-rules-for-naming","dir":"","previous_headings":"Names and codes","what":"Tips and rules for naming:","title":"Analysis of Eye Data","text":"Don’t creative names! Use common coding: eyes: “r”, “re”, “od”, “right” - numeric coding r:l = 0:1 1:2 Visual acuity: “VA”, “BCVA”, “Acuity” Intraocular pressure: “IOP”, “GAT”, “NCT”, “pressure” Patient identifier: “pat”, “patient”, “ID” (ideally : “patientID” “patID”) Column names: spaces! use numeric coding eyes column names Separate eye VA IOP codes underscores (“bcva_l_preop”, “VA_r”, “left_va”, “IOP_re”) Keep names short Don’t use underscores don’t need : Consider section divided underscore relevant characteristic variable. E.g., “preop” instead “pre_op”, simply “VA” instead “VA_ETDRS_Letters”","code":""},{"path":"https://github.com/tjebo/eye/index.html","id":"name-examples","dir":"","previous_headings":"Names and codes","what":"Name examples","title":"Analysis of Eye Data","text":"Good names (eye work nicely) OK names (eye work) Bad names (eye fail)","code":"## right and left eyes have common codes ## information on the tested dimension is included (\"iop\") ## VA and eye strings are separated by underscores ## No unnecessary underscores. names(wide_df) #>  [1] \"id\"            \"surgery_right\" \"surgery_left\"  \"iop_r_preop\"   #>  [5] \"iop_r_postop\"  \"iop_l_preop\"   \"iop_l_postop\"  \"va_r_preop\"    #>  [9] \"va_r_postop\"   \"va_l_preop\"    \"va_l_postop\"  names(iop_wide)  #> [1] \"id\"    \"iop_r\" \"iop_l\" ## Id and Eye are common names, there are no spaces ## VA is separated from the rest with an underscore ## BUT:  ## The names are quite long  ## There is an unnecessary underscore (etdrs are always letters). Better just \"VA\" c(\"Id\", \"Eye\", \"FollowupDays\", \"BaselineAge\", \"Gender\", \"VA_ETDRS_Letters\",  \"InjectionNumber\") #> [1] \"Id\"               \"Eye\"              \"FollowupDays\"     \"BaselineAge\"      #> [5] \"Gender\"           \"VA_ETDRS_Letters\" \"InjectionNumber\"  ## All names are commonly used (good!) ## But which dimension of \"r\"/\"l\" are we exactly looking at?  c(\"id\", \"r\",  \"l\") #> [1] \"id\" \"r\"  \"l\" ## VA/IOP not separated with underscore ## `eye` won't be able to recognize IOP and VA columns c(\"id\", \"iopr\", \"iopl\", \"VAr\", \"VAl\") #> [1] \"id\"   \"iopr\" \"iopl\" \"VAr\"  \"VAl\"  ## A human may think this is clear ## But `eye` will fail to understand those variable names c(\"person\", \"goldmann\", \"vision\") #> [1] \"person\"   \"goldmann\" \"vision\"  ## Not even clear to humans c(\"var1\", \"var2\", \"var3\") #> [1] \"var1\" \"var2\" \"var3\""},{"path":"https://github.com/tjebo/eye/index.html","id":"how-do-i-rename-columns-in-r","dir":"","previous_headings":"Names and codes","what":"How do I rename columns in R?","title":"Analysis of Eye Data","text":"started R, found challenging rename columns found following threads stackoverflow helpful: Rename single column Rename columns named vector find two following methods straight forward:","code":"# I've got a data frame with unfortunate names: name_mess <- data.frame(name = \"a\", oculus = \"r\", eyepressure = 14, vision = 0.2) names(name_mess) #> [1] \"name\"        \"oculus\"      \"eyepressure\" \"vision\"  ## rename all names names(name_mess) <- c(\"patID\", \"eye\", \"IOP\", \"VA\") names(name_mess) #> [1] \"patID\" \"eye\"   \"IOP\"   \"VA\" ## To rename only specific columns, even if you are not sure about their exact position: names(name_mess)[names(name_mess) %in% c(\"name\", \"vision\")] <- c(\"patID\", \"VA\") names(name_mess) #> [1] \"patID\"       \"oculus\"      \"eyepressure\" \"VA\""},{"path":"https://github.com/tjebo/eye/index.html","id":"important-notes","dir":"","previous_headings":"","what":"Important notes","title":"Analysis of Eye Data","text":"assume responsability data analysis. Please always keep critical mind working data - get results seem implausible, may chance data unfortunate shape eye may suitable.","code":""},{"path":"https://github.com/tjebo/eye/index.html","id":"va-conversion","dir":"","previous_headings":"","what":"VA conversion","title":"Analysis of Eye Data","text":"VA conversion Snellen, ETDRS logMAR based charts formulas (Holladay 2004), (Beck et al. 2003) (Gregori, Feuer, Rosenfeld 2010) Categories counting fingers hand movements converted following (Schulze-Bonsel et al. 2006) Categories () light perception converted following suggestions Michael Bach","code":""},{"path":"https://github.com/tjebo/eye/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Analysis of Eye Data","text":"Thanks Alasdair Warwick, Aaron Lee, Tim Yap, Siegfried Wagner Abraham Olvera great suggestions, testing code review. Pearse Keane, Dun Jack Fu, Katrin Fasler Christoph Kern contribution open source data Thanks Antoine Fabri contribution getage() Thanks Hadley Wickham developers tidyverse packages packages roxygen2, usethis, testthis devtools, eye heavily relies.","code":""},{"path":"https://github.com/tjebo/eye/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Analysis of Eye Data","text":"Michael Bach’s homepage Michael Bach NLP LP","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/VAclasses.html","id":null,"dir":"Reference","previous_headings":"","what":"VA classes — VAclasses","title":"VA classes — VAclasses","text":"VA classes","code":""},{"path":"https://github.com/tjebo/eye/reference/VAclasses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VA classes — VAclasses","text":"","code":"VAclasses"},{"path":"https://github.com/tjebo/eye/reference/VAclasses.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"VA classes — VAclasses","text":"object class character length 5.","code":""},{"path":"https://github.com/tjebo/eye/reference/VAwrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"VA conversion wrapper — VAwrapper","title":"VA conversion wrapper — VAwrapper","text":"Simple convenience wrapper around va get desired VA class","code":""},{"path":"https://github.com/tjebo/eye/reference/VAwrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VA conversion wrapper — VAwrapper","text":"","code":"to_logmar(x, ...)  to_etdrs(x, ...)  to_snellen(x, ...)  as_logmar(x, ...)  as_etdrs(x, ...)  as_snellen(x, ...)"},{"path":"https://github.com/tjebo/eye/reference/VAwrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"VA conversion wrapper — VAwrapper","text":"x vector visual acuities ... parameters passed va","code":""},{"path":"https://github.com/tjebo/eye/reference/VAwrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"VA conversion wrapper — VAwrapper","text":"vector visual acuity class as_(...) to_(...) See also convertVA: \"VA classes\"","code":""},{"path":"https://github.com/tjebo/eye/reference/VAwrapper.html","id":"va-conversion","dir":"Reference","previous_headings":"","what":"VA conversion","title":"VA conversion wrapper — VAwrapper","text":"details see va convertVA","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/VAwrapper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"VA conversion wrapper — VAwrapper","text":"","code":"x <- c(23, 56, 74, 58) ## ETDRS letters to_logmar(x) #> From etdrs #> [1] 1.24 0.58 0.22 0.54 to_snellen(x) #> From etdrs #> [1] \"20/320\" \"20/80\"  \"20/32\"  \"20/70\"  to_snellen(x, type = \"dec\") #> From etdrs #> [1] \"0.062\" \"0.25\"  \"0.625\" \"0.3\"    x <- c(\"NLP\", \"0.8\", \"34\", \"3/60\", \"2/200\", \"20/50\", \"  \", \".\", \"-\", \"NULL\") to_snellen(x, from = \"snellendec\") #> 8x NA introduced for: 34, 3/60, 2/200, 20/50,   , ., -, NULL #>  [1] \"20/20000\" \"20/25\"    NA         NA         NA         NA         #>  [7] NA         NA         NA         NA         to_snellen(x, from = \"etdrs\") #> 8x NA introduced for: 0.8, 3/60, 2/200, 20/50,   , ., -, NULL #>  [1] \"20/20000\" NA         \"20/200\"   NA         NA         NA         #>  [7] NA         NA         NA         NA         to_snellen(x, from = \"logmar\") #> 8x NA introduced for: 34, 3/60, 2/200, 20/50,   , ., -, NULL #>  [1] \"20/20000\" \"20/125\"   NA         NA         NA         NA         #>  [7] NA         NA         NA         NA"},{"path":"https://github.com/tjebo/eye/reference/blink.html","id":null,"dir":"Reference","previous_headings":"","what":"Your data in a blink of an eye — blink","title":"Your data in a blink of an eye — blink","text":"blink summarizes data tailored need ophthalmic research: looks VA IOP columns summarises common statistics. order make work, requires specific column naming - please see section \"column names\" \"data coding\". details blink works, see vignette(\"eye\")","code":""},{"path":"https://github.com/tjebo/eye/reference/blink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Your data in a blink of an eye — blink","text":"","code":"blink(x, va_to = \"logmar\", va_cols = NULL, iop_cols = NULL, fct_level = 0:4)"},{"path":"https://github.com/tjebo/eye/reference/blink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Your data in a blink of an eye — blink","text":"x data frame va_to VA notation (passed va()) va_cols specified, overruling automatic VA columns selection. tidyselection supported iop_cols specified, overruling automatic IOP columns selection. tidyselection supported fct_level Remove columns Summarizing unique values fall range. character numeric vector, default 1:4","code":""},{"path":"https://github.com/tjebo/eye/reference/blink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Your data in a blink of an eye — blink","text":"object class blink list. Class blink contains myopized data, count patients eyes, summaries visual acuities intraocular pressure.","code":""},{"path":"https://github.com/tjebo/eye/reference/blink.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Your data in a blink of an eye — blink","text":"blink basically wrapper around myop, eyes reveal: Duplicate rows always removed Column names prepared myopization (see myop) VA always converted logmar","code":""},{"path":"https://github.com/tjebo/eye/reference/blink.html","id":"data-coding","dir":"Reference","previous_headings":"","what":"Data coding","title":"Your data in a blink of an eye — blink","text":"common codes supported: eyes: \"r\", \"re\", \"od\", \"right\" - numeric coding r:l = 0:1 1:2 Visual acuity: \"VA\", \"BCVA\", \"Acuity\" Intraocular pressure: \"IOP\", \"GAT\", \"NCT\", \"pressure\"","code":""},{"path":"https://github.com/tjebo/eye/reference/blink.html","id":"column-name-rules","dir":"Reference","previous_headings":"","what":"Column name rules","title":"Your data in a blink of an eye — blink","text":"spaces! use numeric coding eyes column names Separate eye VA IOP codes underscores (\"bcva_l_preop\", \"VA_r\", \"left_va\", \"IOP_re\") Avoid separate VA IOP codes actually containing VA/ IOP data (e.g. \"stableVA\" instead \"stable_va\", ChangeIOP instead \"change_IOP\") Keep names short use underscores . Consider section divided underscore relevant characteristic variable. (\"preop\" instead \"pre_op\", \"VA\" instead \"VA_ETDRS_Letters\") Use common codes patient column (see eyes, section Guessing) (e.g., \"pat\", \"patient\" \"ID\", ideally : \"patientID\" \"patID\") creative names!","code":""},{"path":"https://github.com/tjebo/eye/reference/blink.html","id":"names-examples","dir":"Reference","previous_headings":"","what":"Names examples","title":"Your data in a blink of an eye — blink","text":"Good names: -c(\"patid\", \"surgery_right\", \"iop_r_preop\", \"va_r_preop\", \"iop_r\", \"iop_l\") OK names -c(\"Id\", \"Eye\", \"BaselineAge\", \"VA_ETDRS_Letters\", \"InjectionNumber\"): Names long two unnecessary underscore VA column. Better just \"VA\" -c(\"id\", \"r\",  \"l\"): names commonly used (good!), dimension \"r\"/\"l\" exactly looking ? Bad names (eye fail) c(\"id\", \"iopr\", \"iopl\", \"VAr\", \"VAl\"): eye able recognize IOP VA columns c(\"id\", \"iop_r\", \"iop_l\", \"stable_iop_r\", \"stable_iop_l\"): eye may wrongly identify (probably logical) columns \"stable_iop\" columns containing IOP data. Better maybe: \"stableIOP_l\" c(\"person\", \"goldmann\", \"vision\"): eye recognize ","code":""},{"path":"https://github.com/tjebo/eye/reference/blink.html","id":"tidy-data","dir":"Reference","previous_headings":"","what":"tidy data","title":"Your data in a blink of an eye — blink","text":"blink myop work reliably clean data (package , really!). clean data.","code":""},{"path":"https://github.com/tjebo/eye/reference/blink.html","id":"column-removal","dir":"Reference","previous_headings":"","what":"column removal","title":"Your data in a blink of an eye — blink","text":"Done remCols: Removes columns contain values defined fct_levels logicals selected columns (currently automatically manually selected columns). fct_levels removed likely categorical codes.","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/blink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Your data in a blink of an eye — blink","text":"","code":"library(eyedata) blink(amd2) #> The lifecycle of blink() has expired. It will no longer be #>   maintained, but will be kept in the package. #> Warning: Data seems already myopic - no changes made. ?myop for help #> From etdrs. Could be etdrs, logmar, snellendec #>  #> ── blink ─────────────────────────────────────────────────────────────────────── #> ══ Data ════════════════════════════════ #> # A tibble: 40,764 × 7 #>    patid sex    age0 eye    time va       inj_no #>    <chr> <chr> <dbl> <chr> <dbl> <logmar>  <dbl> #>  1 id_1  f        99 l         0 0.82          1 #>  2 id_1  f        99 l        28 0.08          2 #>  3 id_1  f        99 l        67 0.70          3 #>  4 id_1  f        99 l       147 0.90          4 #>  5 id_1  f        99 l       259 1.06          5 #>  6 id_1  f        99 l       343 1.02          6 #>  7 id_1  f        99 l       399 0.96          7 #>  8 id_1  f        99 l       534 1.06          8 #>  9 id_2  m        82 r         0 0.40          1 #> 10 id_2  m        82 r        39 0.46          2 #> # ℹ 40,754 more rows #>  #> ══ Count of patient and eyes ═══════════ #> ══ Counts ═══════════════ #>    id  eyes right  left  #>  3357  3357  1681  1676  #>  #> ══ Visual acuity ═══════════════════════ #>  #> ── $VA_total (all eyes)  #>   var mean  sd     n  min max #> 1  va  0.5 0.3 40762 -0.3 2.3 #>  #> ── $VA_eyes (right and left eyes)  #>   var1 var2 var mean  sd     n  min max #> 1    l    r  va  0.5 0.3 20458 -0.3 2.3 #> 2    l    r  va  0.5 0.3 20304 -0.3 2.3 #>  #> ══ Intraocular pressure ════════════════ #>  #> ── $IOP_total (all eyes)  #> NULL #>  #> ── $IOP_eyes (right and left eyes)  #> NULL  messy_df <- data.frame( id = letters[1:3], iop_r_preop = sample(21:23), iop_r_postop = sample(11:13), iop_l_postop = sample(11:13), iop_l_preop = sample(31:33), va_r_preop = sample(41:43),  va_l_preop = sample(41:43), va_r_postop = sample(51:53), va_l_postop = sample(45:47) ) blink(messy_df) #> The lifecycle of blink() has expired. It will no longer be #>   maintained, but will be kept in the package. #> From etdrs #> From etdrs #>  #> ── blink ─────────────────────────────────────────────────────────────────────── #> ══ Data ════════════════════════════════ #> # A tibble: 6 × 6 #>   id    eye   iop_preop iop_postop va_preop va_postop #>   <chr> <chr> <chr>     <chr>      <logmar> <logmar>  #> 1 a     right 21        13         0.84     0.66      #> 2 a     left  31        12         0.86     0.80      #> 3 b     right 22        11         0.88     0.68      #> 4 b     left  33        11         0.88     0.78      #> 5 c     right 23        12         0.86     0.64      #> 6 c     left  32        13         0.84     0.76      #>  #> ══ Count of patient and eyes ═══════════ #> ══ Counts ═══════════════ #>    id  eyes right  left  #>     3     6     3     3  #>  #> ══ Visual acuity ═══════════════════════ #>  #> ── $VA_total (all eyes)  #>         var mean  sd n min max #> 1  va_preop  0.9 0.0 6 0.8 0.9 #> 2 va_postop  0.7 0.1 6 0.6 0.8 #>  #> ── $VA_eyes (right and left eyes)  #>   var1 var2  var3  var4       var mean sd n min max #> 1 left left right right  va_preop  0.9  0 3 0.8 0.9 #> 2 left left right right va_postop  0.8  0 3 0.8 0.8 #> 3 left left right right  va_preop  0.9  0 3 0.8 0.9 #> 4 left left right right va_postop  0.7  0 3 0.6 0.7 #>  #> ══ Intraocular pressure ════════════════ #>  #> ── $IOP_total (all eyes)  #>          var mean  sd n min max #> 1  iop_preop   27 5.5 6  21  33 #> 2 iop_postop   12 0.9 6  11  13 #>  #> ── $IOP_eyes (right and left eyes)  #>   var1 var2  var3  var4        var mean sd n min max #> 1 left left right right  iop_preop   32  1 3  31  33 #> 2 left left right right iop_postop   12  1 3  11  13 #> 3 left left right right  iop_preop   22  1 3  21  23 #> 4 left left right right iop_postop   12  1 3  11  13"},{"path":"https://github.com/tjebo/eye/reference/clean_va.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleaning up Visual acuity entries — clean_va","title":"Cleaning up Visual acuity entries — clean_va","text":"VA cleaning: tidyNA: Replacing empty placeholders (\".\",\"\", \"(number empty space)\", \"NULL\", \"NA\", \"N/\" , \"-\") - cases - NA Simplifying notation qualitative VA notation (NPL becomes NLP, PL becomes LP) Removing non-Snellen character strings","code":""},{"path":"https://github.com/tjebo/eye/reference/clean_va.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleaning up Visual acuity entries — clean_va","text":"","code":"clean_va(x, message = TRUE)  cleanVA(x, message = TRUE)"},{"path":"https://github.com/tjebo/eye/reference/clean_va.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleaning up Visual acuity entries — clean_va","text":"x Vector VA entries message message replaced NA values","code":""},{"path":"https://github.com/tjebo/eye/reference/clean_va.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleaning up Visual acuity entries — clean_va","text":"character vector","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/convertQuali.html","id":null,"dir":"Reference","previous_headings":"","what":"convert quali entries — convertQuali","title":"convert quali entries — convertQuali","text":"converting quality VA entries","code":""},{"path":"https://github.com/tjebo/eye/reference/convertQuali.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert quali entries — convertQuali","text":"","code":"convertQuali(x, to_class)  convertQuali_custom(x, to_class, to, quali_values)"},{"path":"https://github.com/tjebo/eye/reference/convertQuali.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert quali entries — convertQuali","text":"x vector to_class class quali entries cleaned (using custom values) class final conversion (used using custom quali values) quali_values define values qualitative entries (see details)","code":""},{"path":"https://github.com/tjebo/eye/reference/convertQuali.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert quali entries — convertQuali","text":"vector vector","code":""},{"path":"https://github.com/tjebo/eye/reference/convertQuali.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert quali entries — convertQuali","text":"define values qualitative entries, need pass names list names c(\"cf\", \"hm\", \"npl\", \"pl\") - order. accepts values can converted numeric values converts logMAR. want convert different notation, need call va() second time.","code":""},{"path":"https://github.com/tjebo/eye/reference/count_eyes.html","id":null,"dir":"Reference","previous_headings":"","what":"internal count — count_eyes","title":"internal count — count_eyes","text":"count_eyes() internal counting function eyes","code":""},{"path":"https://github.com/tjebo/eye/reference/count_eyes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"internal count — count_eyes","text":"","code":"count_eyes(x, id_col, eye_col, details = FALSE)"},{"path":"https://github.com/tjebo/eye/reference/count_eyes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"internal count — count_eyes","text":"x object (data frame) id_col patient column eye_col eye column details TRUE, get information","code":""},{"path":"https://github.com/tjebo/eye/reference/count_eyes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"internal count — count_eyes","text":"Named integer vector count patients eyes","code":""},{"path":"https://github.com/tjebo/eye/reference/eye.html","id":null,"dir":"Reference","previous_headings":"","what":"eye — eye","title":"eye — eye","text":"See eye","code":""},{"path":"https://github.com/tjebo/eye/reference/eye.html","id":"ophthalmology-functions","dir":"Reference","previous_headings":"","what":"Ophthalmology functions","title":"eye — eye","text":"eye dedicated facilitate common tasks ophthalmic research. Visual acuity conversion snellen, logMAR ETDRS va wrapper to_snellen, to_etdrs to_logmar Counting patients eyes eyes Recode eye strings recodeye Reshape eye specific variables myop hyperop Summarizing data common statistics (mean, sd, n, range)reveal Easy summary eye data one blink blink","code":""},{"path":"https://github.com/tjebo/eye/reference/eye.html","id":"beyond-ophthalmology","dir":"Reference","previous_headings":"","what":"Beyond ophthalmology","title":"eye — eye","text":"getage: Calculate age","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/eye.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"eye — eye","text":"Tjebo Heeren","code":""},{"path":"https://github.com/tjebo/eye/reference/eye_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"List of codes — eye_codes","title":"List of codes — eye_codes","text":"List codes","code":""},{"path":"https://github.com/tjebo/eye/reference/eye_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of codes — eye_codes","text":"","code":"eye_codes"},{"path":"https://github.com/tjebo/eye/reference/eye_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of codes — eye_codes","text":"object class list length 14.","code":""},{"path":"https://github.com/tjebo/eye/reference/eye_codes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of codes — eye_codes","text":"r right eyes l left eyes iop IOP codes va VA codes method VA methods id patient column codes quali quali VA codes","code":""},{"path":"https://github.com/tjebo/eye/reference/eyes.html","id":null,"dir":"Reference","previous_headings":"","what":"Count patients and eyes — eyes","title":"Count patients and eyes — eyes","text":"Counts number subjects right left eyes. Columns guessed.","code":""},{"path":"https://github.com/tjebo/eye/reference/eyes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count patients and eyes — eyes","text":"","code":"eyes(x, id_col = NULL, eye_col = NULL, dropunknown = TRUE, details = FALSE)  eyestr(x, ..., english = \"small\", caps = FALSE)"},{"path":"https://github.com/tjebo/eye/reference/eyes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count patients and eyes — eyes","text":"x required. (data frame) id_col Subject identifying column, passed (quoted) character Can also abbreviated \"id\" per partial matching eye_col Eye identifying column, passed (quoted) character. Can also abbreviated \"eye\" per partial matching dropunknown introduces NA values recognized recodeye details TRUE, add information many subjects one eye included, provide list subject IDs ... passed eyes english numbers written plain english: choose \"small\" numbers till 12, \"\" (numbers), \"none\" (string!) none caps TRUE, first number capital first letter","code":""},{"path":"https://github.com/tjebo/eye/reference/eyes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count patients and eyes — eyes","text":"List (class \"eyes\" count patients eyes \"details = TRUE\", list class \"eyes_details\" returned eyestr: Character string - can directly pasted reports","code":""},{"path":"https://github.com/tjebo/eye/reference/eyes.html","id":"column-guessing","dir":"Reference","previous_headings":"","what":"Column guessing","title":"Count patients and eyes — eyes","text":"id_col eye_col arguments overrule name guessing respective columns (, cases need match). arguments can abbreviated (id eye) per partial argument name matching. , cases always ignored (column names can upper lower case, please) patient ID columns: First, eyes looking names contain strings \"pat\" \"id\" (order matter) - can change set_eye_strings Next, look columns plainly called \"ID\" Last, search names contain either \"pat\" \"id\" eye column: eyes primarily looks columns called either \"eye\" \"eyes\", (can change set_eye_strings) present, columns containing string \"eye\" (e.g., EyeName recognized)","code":""},{"path":"https://github.com/tjebo/eye/reference/eyes.html","id":"eye-coding","dir":"Reference","previous_headings":"","what":"Eye coding","title":"Count patients and eyes — eyes","text":"following codes recognized: (change set_eye_strings) integer coding 0:1 1:2, right eye lower number. right eyes: c(\"r\", \"re\", \"od\", \"right\") left eyes: c(\"l\", \"le\", \"os\", \"left\") eyes: c(\"b\", \"\", \"ou\") eye column contains values, dropped NA (dropunknown) kept (patients counted, coding remains unclear). Recommend recode recodeye","code":""},{"path":"https://github.com/tjebo/eye/reference/eyes.html","id":"eyestr","dir":"Reference","previous_headings":"","what":"eyestr","title":"Count patients and eyes — eyes","text":"eyestr creates string can pasted reports. currently supports \"x eyes n patient(s)\" limitation, guess vast majority  cases \"correct\". use categories (e.g., \"people\" \"participants\"), use eyes(...)[1]","code":""},{"path":"https://github.com/tjebo/eye/reference/eyes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count patients and eyes — eyes","text":"","code":"library(eyedata) eyes(amd2) #> ══ Counts ═══════════════ #>    id  eyes right  left  #>  3357  3357  1681  1676   ## If you code your eyes with different strings, ## e.g., because you are using a different language, ## you can change this either with `set_eye_strings` set_eye_strings(right = c(\"droit\", \"od\"), left = c(\"gauche\", \"og\"))  ## restore defaults with set_eye_strings() # Examples for the usage of eyestr eyestr(amd2) #> [1] \"3357 eyes of 3357 patients\"  set.seed(1) ls_dat <-   lapply(c(1, 12, 13),     function(x) data.frame(id = as.character(1:x),                            eye = sample(c(\"r\", \"l\"), x, replace = TRUE)))  lapply(ls_dat, eyestr, english = \"small\") #> [[1]] #> [1] \"one eye of one patient\" #>  #> [[2]] #> [1] \"twelve eyes of twelve patients\" #>  #> [[3]] #> [1] \"13 eyes of 13 patients\" #>  lapply(ls_dat, eyestr, english = \"all\") #> [[1]] #> [1] \"one eye of one patient\" #>  #> [[2]] #> [1] \"twelve eyes of twelve patients\" #>  #> [[3]] #> [1] \"thirteen eyes of thirteen patients\" #>  lapply(ls_dat, eyestr, english = \"all\", caps = TRUE) #> [[1]] #> [1] \"One eye of one patient\" #>  #> [[2]] #> [1] \"Twelve eyes of twelve patients\" #>  #> [[3]] #> [1] \"Thirteen eyes of thirteen patients\" #>  lapply(ls_dat, eyestr, english = \"none\") #> [[1]] #> [1] \"1 eye of 1 patient\" #>  #> [[2]] #> [1] \"12 eyes of 12 patients\" #>  #> [[3]] #> [1] \"13 eyes of 13 patients\" #>  lapply(ls_dat, eyestr, english = \"none\") #> [[1]] #> [1] \"1 eye of 1 patient\" #>  #> [[2]] #> [1] \"12 eyes of 12 patients\" #>  #> [[3]] #> [1] \"13 eyes of 13 patients\" #>"},{"path":"https://github.com/tjebo/eye/reference/eyes_to_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Eye count to strings — eyes_to_string","title":"Eye count to strings — eyes_to_string","text":"Eye count strings","code":""},{"path":"https://github.com/tjebo/eye/reference/eyes_to_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eye count to strings — eyes_to_string","text":"","code":"eyes_to_string(x, english = \"small\", caps = FALSE)"},{"path":"https://github.com/tjebo/eye/reference/eyes_to_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eye count to strings — eyes_to_string","text":"x vector one two english numbers written plain english: choose \"small\" numbers till 12, \"\" (numbers), \"none\" (string!) none caps TRUE, first number capital first letter","code":""},{"path":"https://github.com/tjebo/eye/reference/eyes_to_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eye count to strings — eyes_to_string","text":"Character string - can directly pasted reports","code":""},{"path":"https://github.com/tjebo/eye/reference/getElem.html","id":null,"dir":"Reference","previous_headings":"","what":"Find element based or strings — getElem","title":"Find element based or strings — getElem","text":"Finds element object one following: getElem_id ID column getElem_eyecol eye column getElem_eye columns contain information right/left eyes getElem_va Visual acuity getElem_iop IOP getElem search vector, column names (data frame) names (list)","code":""},{"path":"https://github.com/tjebo/eye/reference/getElem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find element based or strings — getElem","text":"","code":"getElem_id(obj)  getElem_eyecol(obj)  getElem_eye(obj)  getElem_va(obj)  getElem_iop(obj)"},{"path":"https://github.com/tjebo/eye/reference/getElem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find element based or strings — getElem","text":"obj can vector, data frame list","code":""},{"path":"https://github.com/tjebo/eye/reference/getElem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find element based or strings — getElem","text":"vector","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/getage.html","id":null,"dir":"Reference","previous_headings":"","what":"getage — getage","title":"getage — getage","text":"calculates age years, durations periods","code":""},{"path":"https://github.com/tjebo/eye/reference/getage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getage — getage","text":"","code":"getage(from_date, to_date = lubridate::now(), period = FALSE, dec = 1)"},{"path":"https://github.com/tjebo/eye/reference/getage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getage — getage","text":"from_date start date to_date end date period Calculating period (TRUE) duration (FALSE- default) dec many decimals displayed","code":""},{"path":"https://github.com/tjebo/eye/reference/getage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getage — getage","text":"Numeric vector","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/getage.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"getage — getage","text":"Antoine Fabri Tjebo Heeren","code":""},{"path":"https://github.com/tjebo/eye/reference/getage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getage — getage","text":"","code":"getage(\"1984-10-16\") #> [1] 40.9  dob <-  c(\"1984-10-16\", \"2000-01-01\") test_date <-  as.Date(dob) + c(15000, 20000) getage(dob, test_date) #> [1] 41.1 54.8"},{"path":"https://github.com/tjebo/eye/reference/hyperop.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperopic eye data — hyperop","title":"Hyperopic eye data — hyperop","text":"Pivot eye-related variables two columns","code":""},{"path":"https://github.com/tjebo/eye/reference/hyperop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperopic eye data — hyperop","text":"","code":"hyperop(x, cols, eye = NULL)"},{"path":"https://github.com/tjebo/eye/reference/hyperop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperopic eye data — hyperop","text":"x data frame cols columns made \"wide\". Tidyselection supported eye eye column (default looking \"eye\" \"eyes\", cases)","code":""},{"path":"https://github.com/tjebo/eye/reference/hyperop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperopic eye data — hyperop","text":"tibble, see also tibble::tibble","code":""},{"path":"https://github.com/tjebo/eye/reference/hyperop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hyperopic eye data — hyperop","text":"Basically opposite myop() - slightly intelligent wrapper around tidyr::pivot_longer() tidyr::pivot_wider() find eye column, unify codes eyes (\"r\" \"l\") pivot columns wide, specified \"cols\". Good names tidy data always help! information shaping data good names, see vignette(\"eye\"), ?blink ?myop","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/hyperop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperopic eye data — hyperop","text":"","code":"# Example to clean a bit messy data frame  iopva <- data.frame(   id = c(\"a\", \"e\", \"j\", \"h\"),   va_r = c(37L, 36L, 33L, 38L),   iop_r = c(38L, 40L, 33L, 34L),   va_l = c(30L, 39L, 37L, 40L),   iop_l = c(31L, 34L, 33L, 31L) ) myop_iop <- myop(iopva) hyperop(myop_iop, cols = matches(\"va|iop\")) #> # A tibble: 4 × 5 #>   id    r_va  r_iop l_va  l_iop #>   <chr> <chr> <chr> <chr> <chr> #> 1 a     37    38    30    31    #> 2 e     36    40    39    34    #> 3 j     33    33    37    33    #> 4 h     38    34    40    31"},{"path":"https://github.com/tjebo/eye/reference/introduceNA.html","id":null,"dir":"Reference","previous_headings":"","what":"introduce NA for implausible VA entries — introduceNA","title":"introduce NA for implausible VA entries — introduceNA","text":"introduce NA implausible VA entries","code":""},{"path":"https://github.com/tjebo/eye/reference/introduceNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"introduce NA for implausible VA entries — introduceNA","text":"","code":"introduceNA(x, test)"},{"path":"https://github.com/tjebo/eye/reference/introduceNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"introduce NA for implausible VA entries — introduceNA","text":"x vector test plausibility test","code":""},{"path":"https://github.com/tjebo/eye/reference/introduceNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"introduce NA for implausible VA entries — introduceNA","text":"vector","code":""},{"path":"https://github.com/tjebo/eye/reference/myop.html","id":null,"dir":"Reference","previous_headings":"","what":"Myopic eye data — myop","title":"Myopic eye data — myop","text":"Pivot \"eye\" variable one column","code":""},{"path":"https://github.com/tjebo/eye/reference/myop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Myopic eye data — myop","text":"","code":"myop(x, var = \"value\")  myopic(x, var = \"value\")"},{"path":"https://github.com/tjebo/eye/reference/myop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Myopic eye data — myop","text":"x data frame var Character vector length 1 specifying variable one column per eye info variable (default \"value\")","code":""},{"path":"https://github.com/tjebo/eye/reference/myop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Myopic eye data — myop","text":"tibble, see also tibble::tibble","code":""},{"path":"https://github.com/tjebo/eye/reference/myop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Myopic eye data — myop","text":"convenience, data often entered \"wide\" format: two columns variable, one column eye. myop pivot eye variable one column keep variables wide. E.g., eight columns store data four variables two eyes pivoted 5 columns (one eye four variable columns, see also examples). myop requires specific data format column called \"eye\" \"eyes\", myop make changes - data already assumed long format. also columns eye-specific values, messy data. Maybe, remove rename \"eye\" column let myop work. myop recognize meaningful coding eyes: Right eyes: \"r\", \"re\", \"od\", \"right\" Left eyes:  \"l\", \"le\", \"os\", \"left\" codes see also eye_codes strings eyes need separated period underscores. (Periods replaced underscores). order allowed. work: \"va_r\", \"right_morningpressure\", \"night_iop.le\", \"gat_os_postop\" fail: \"VAr\", \"rightmorningPressure\", \"night_IOPle\", \"gatOSpostop\" exception one column eye. column names can consist eye strings (see ) . case, var used \"name\" resulting variable. eye columns data (actually happen), myop create identifiers row position. Please always check result plausibility. Depending lot data entered, results become quite surprising. basically nearly infinite amount possible combinations enter data, likely myop able deal ","code":""},{"path":"https://github.com/tjebo/eye/reference/myop.html","id":"internal-preparation","dir":"Reference","previous_headings":"","what":"internal preparation","title":"Myopic eye data — myop","text":"Rename data names  myop_rename, replacing \".\" \"_\" Use sort_substr() - sorting eye strings first, strings coding methods  (IOP/VA), rest.","code":""},{"path":"https://github.com/tjebo/eye/reference/myop.html","id":"myopization","dir":"Reference","previous_headings":"","what":"myopization","title":"Myopic eye data — myop","text":"actual work done myopizer myop_pivot","code":""},{"path":"https://github.com/tjebo/eye/reference/myop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Myopic eye data — myop","text":"","code":"# Example to clean a bit messy data frame iopva <- data.frame(   id = c(\"a\", \"e\", \"j\", \"h\"),   va_r = c(37L, 36L, 33L, 38L),   iop_r = c(38L, 40L, 33L, 34L),   va_l = c(30L, 39L, 37L, 40L),   iop_l = c(31L, 34L, 33L, 31L) ) myop(iopva) #> # A tibble: 8 × 4 #>   id    eye   va    iop   #>   <chr> <chr> <chr> <chr> #> 1 a     right 37    38    #> 2 a     left  30    31    #> 3 e     right 36    40    #> 4 e     left  39    34    #> 5 j     right 33    33    #> 6 j     left  37    33    #> 7 h     right 38    34    #> 8 h     left  40    31     iop_wide <- data.frame(id = letters[1:3],  r = 11:13 , l = 14:16) # the variable has not been exactly named, so you can specify # it with the var argument myop(iop_wide, var = \"iop\") #> # A tibble: 6 × 3 #>   id    eye   iop   #>   <chr> <chr> <chr> #> 1 a     right 11    #> 2 a     left  14    #> 3 b     right 12    #> 4 b     left  15    #> 5 c     right 13    #> 6 c     left  16"},{"path":"https://github.com/tjebo/eye/reference/myop_pivot.html","id":null,"dir":"Reference","previous_headings":"","what":"myopizer — myop_pivot","title":"myopizer — myop_pivot","text":"actual myopization using tidyr::pivot_longer several columns partial strings \"eye codes\" names","code":""},{"path":"https://github.com/tjebo/eye/reference/myop_pivot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"myopizer — myop_pivot","text":"","code":"myop_pivot(x)"},{"path":"https://github.com/tjebo/eye/reference/myop_pivot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"myopizer — myop_pivot","text":"x object (data frame)","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/myop_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename — myop_rename","title":"Rename — myop_rename","text":"Rename data names myop(), replacing \".\" \"_\" order prepare use sort_substr() - sorting eye strings first, strings coding methods like IOP/VA, rest.","code":""},{"path":"https://github.com/tjebo/eye/reference/myop_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename — myop_rename","text":"","code":"myop_rename(x)"},{"path":"https://github.com/tjebo/eye/reference/myop_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename — myop_rename","text":"x object (data frame)","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/myopizer.html","id":null,"dir":"Reference","previous_headings":"","what":"myopizer — myopizer","title":"myopizer — myopizer","text":"internal function, checks prepares data frames \"myopization\": Removing duplicates, returning myopized data criteria fulfilled (\"eye\" column, one variable column eye codes partial string). Names need prepared myop_rename beforehand.","code":""},{"path":"https://github.com/tjebo/eye/reference/myopizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"myopizer — myopizer","text":"","code":"myopizer(x, var = \"value\")"},{"path":"https://github.com/tjebo/eye/reference/myopizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"myopizer — myopizer","text":"x data frame var Character vector length 1 specifying variable one column per eye info variable (default \"value\")","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/parse_snellen.html","id":null,"dir":"Reference","previous_headings":"","what":"parsing snellen fractions to numeric values — parse_snellen","title":"parsing snellen fractions to numeric values — parse_snellen","text":"parsing snellen fractions numeric values","code":""},{"path":"https://github.com/tjebo/eye/reference/parse_snellen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parsing snellen fractions to numeric values — parse_snellen","text":"","code":"parse_snellen(y)"},{"path":"https://github.com/tjebo/eye/reference/parse_snellen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parsing snellen fractions to numeric values — parse_snellen","text":"y vector","code":""},{"path":"https://github.com/tjebo/eye/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://github.com/tjebo/eye/reference/plausibility_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Plausibility checking — plausibility_methods","title":"Plausibility checking — plausibility_methods","text":"S3 methods checking plausibility VA entries","code":""},{"path":"https://github.com/tjebo/eye/reference/plausibility_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plausibility checking — plausibility_methods","text":"","code":"checkVA(x, ...)  # S3 method for class 'quali' checkVA(x, ...)  # S3 method for class 'snellen' checkVA(x, ...)  # S3 method for class 'snellendec' checkVA(x, ...)  # S3 method for class 'logmar' checkVA(x, ...)  # S3 method for class 'etdrs' checkVA(x, ...)  # Default S3 method checkVA(x, ...)"},{"path":"https://github.com/tjebo/eye/reference/plausibility_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plausibility checking — plausibility_methods","text":"x vector visual acuities ... arguments passed methods","code":""},{"path":"https://github.com/tjebo/eye/reference/plausibility_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plausibility checking — plausibility_methods","text":"vector visual acuity class va. See also \"VA classes\"","code":""},{"path":"https://github.com/tjebo/eye/reference/plausibility_methods.html","id":"plausibility-checks","dir":"Reference","previous_headings":"","what":"Plausibility checks","title":"Plausibility checking — plausibility_methods","text":"VA can snellen (fraction: feet/meter), snellen decimal, logMAR, ETDRS, \"qualitative\" (Counting fingers, etc.) Snellen fractions need either form 6/x 20/x Snellen decimal must > 0 <= 2 ETDRS must >= 0 <= 100 logMAR must >= -0.3 <= 3.0 Qualitative must PL, LP, NLP, NPL, HM, CF (case allowed) element implausible / recognized converted NA","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/print_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"print eye classes — print_methods","title":"print eye classes — print_methods","text":"S3 methods VA classes \"snellen\", \"logmar\" \"etdrs\". snellen always also character class- categorical continuous. logmar etdrs numerics (logMAR double, etdrs integer). S3 methods class blink S3 methods class eyes S3 methods class eyes_details","code":""},{"path":"https://github.com/tjebo/eye/reference/print_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print eye classes — print_methods","text":"","code":"# S3 method for class 'snellen' print(x, ...)  # S3 method for class 'logmar' print(x, ...)  # S3 method for class 'etdrs' print(x, ...)  # S3 method for class 'blink' print(x, ...)  # S3 method for class 'eyes' print(x, ...)  # S3 method for class 'eyes_details' print(x, show = 6, ...)"},{"path":"https://github.com/tjebo/eye/reference/print_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print eye classes — print_methods","text":"x object class \"eyes_details\" ... arguments passed print.default show many subjects shown printing footnote","code":""},{"path":"https://github.com/tjebo/eye/reference/print_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print eye classes — print_methods","text":"return value, called side effects (printing)","code":""},{"path":"https://github.com/tjebo/eye/reference/recodeye.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode eyes — recodeye","title":"Recode eyes — recodeye","text":"recoding eyes \"r\" \"l\"","code":""},{"path":"https://github.com/tjebo/eye/reference/recodeye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode eyes — recodeye","text":"","code":"recodeye(x, to = NULL, eyestrings = NULL, dropunknown = TRUE)"},{"path":"https://github.com/tjebo/eye/reference/recodeye.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode eyes — recodeye","text":"x vector strings named vector eye codes. unnamed, order: c(r, l, b) eyestrings named list substrings converted right left eyes - passed unnamed, order: list(r, l, b) dropunknown introduces NA values part eyestrings","code":""},{"path":"https://github.com/tjebo/eye/reference/recodeye.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode eyes — recodeye","text":"Character vector","code":""},{"path":"https://github.com/tjebo/eye/reference/recodeye.html","id":"string-detection","dir":"Reference","previous_headings":"","what":"string detection","title":"Recode eyes — recodeye","text":"recodeye automatically detect following strings: right = c(\"r\", \"re\", \"od\", \"right\"), left = c(\"l\", \"le\", \"os\", \"left\"), = c(\"b\",\"\",\"ou\") can change set_eye_strings","code":""},{"path":"https://github.com/tjebo/eye/reference/recodeye.html","id":"to-and-eyecode-arguments","dir":"Reference","previous_headings":"","what":"to and eyecode arguments","title":"Recode eyes — recodeye","text":"passed, ideally length, respective eyes index (name!). lengths equal, e.g., \"\" passed n elements, shorter argument cut first n elements longer argument. Note unique strings part column contained \"eyecode\" argument.","code":""},{"path":"https://github.com/tjebo/eye/reference/recodeye.html","id":"numeric-coding","dir":"Reference","previous_headings":"","what":"numeric coding","title":"Recode eyes — recodeye","text":"Currently numeric coding accepts binary coding (right left eye). order use numeric coding \"eyes\" well, workaround using eyestrings argument suggested.","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/recodeye.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode eyes — recodeye","text":"","code":"x <- c(\"r\", \"re\", \"od\", \"right\", \"l\", \"le\", \"os\", \"left\", \"both\", \"ou\") recodeye(x) #>  [1] \"r\" \"r\" \"r\" \"r\" \"l\" \"l\" \"l\" \"l\" \"b\" \"b\"  ## chose the resulting codes recodeye(x, to = c(\"od\", \"os\", \"ou\")) #>  [1] \"od\" \"od\" \"od\" \"od\" \"os\" \"os\" \"os\" \"os\" \"ou\" \"ou\"  x <- 1:2 recodeye(x) #> Eyes coded 1:2. Interpreting r = 1 #> [1] \"r\" \"l\"  ## If you code your eyes with different strings, ## e.g., because you are using a different language, ## you can change this either with the eyestrings argument, french <- c(\"OD\", \"droit\", \"gauche\", \"OG\") recodeye(french, eyestrings = list(r = c(\"droit\", \"od\"), l = c(\"gauche\", \"og\"))) #> [1] \"r\" \"r\" \"l\" \"l\"  ## or change it more globally with `set_eye_strings` set_eye_strings(right = c(\"droit\", \"od\"), left = c(\"gauche\", \"og\")) recodeye(french) #> [1] \"r\" \"r\" \"l\" \"l\"  ## restore defaults with set_eye_strings()"},{"path":"https://github.com/tjebo/eye/reference/remCols.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove cols from selected cols — remCols","title":"Remove cols from selected cols — remCols","text":"Helper blink(). Removes columns contain values fct_levels binary selected columns (currently automatically manually selected columns). fct_levels removed likely categorical codes.","code":""},{"path":"https://github.com/tjebo/eye/reference/remCols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove cols from selected cols — remCols","text":"","code":"remCols(x, cols, fct_level)"},{"path":"https://github.com/tjebo/eye/reference/remCols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove cols from selected cols — remCols","text":"x data frame cols cols fct_level Remove columns reveal va unique values fall range fct_level","code":""},{"path":"https://github.com/tjebo/eye/reference/remCols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove cols from selected cols — remCols","text":"logical vector","code":""},{"path":"https://github.com/tjebo/eye/reference/reveal.html","id":null,"dir":"Reference","previous_headings":"","what":"reveal — reveal","title":"reveal — reveal","text":"Shows commonly used summary statistics","code":""},{"path":"https://github.com/tjebo/eye/reference/reveal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reveal — reveal","text":"","code":"reveal(x, by = NULL, dec = 1, funs = NULL)"},{"path":"https://github.com/tjebo/eye/reference/reveal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reveal — reveal","text":"x data frame, numeric vector, list numeric vectors character vector names columns. Can several variables! dec many decimals displayed funs really meant used moment - change Summarizing functions named(!) list functions","code":""},{"path":"https://github.com/tjebo/eye/reference/reveal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reveal — reveal","text":"data frame","code":""},{"path":"https://github.com/tjebo/eye/reference/reveal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"reveal — reveal","text":"Character vectors (character columns) removed.","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/reveal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"reveal — reveal","text":"","code":"x = y = z = c(rnorm(20), NA) mylist <- list(x = x, y = y, z = z) ## vectors reveal(x) #> mean   sd    n  min  max  #>  0.0  0.8 20.0 -2.0  1.4  reveal(1:10) #> mean   sd    n  min  max  #>  5.5  3.0 10.0  1.0 10.0  ## named or unnamed list reveal(mylist) #>   var1 var2 var3 mean  sd  n min max #> 1    x    y    z    0 0.8 20  -2 1.4 #> 2    x    y    z    0 0.8 20  -2 1.4 #> 3    x    y    z    0 0.8 20  -2 1.4 set.seed(42) mydf <- cbind(group = rep(letters[1:3], 4), setNames(as.data.frame(replicate(c(rnorm(11), NA), n = 3)), letters[24:26])) ## data frames reveal(mydf) #> Warning: reveal: character columns removed #>   var mean  sd  n  min max #> 1   x  0.6 0.8 11 -0.6 2.0 #> 2   y -0.5 1.5 11 -2.7 2.3 #> 3   z  0.2 1.0 11 -1.8 1.9 ## data frames by group reveal(mydf, by = \"group\") #>   var1 var2 var3 var4 var5 var6 var7 var8 var9 var mean  sd n  min max #> 1    a    a    a    b    b    b    c    c    c   x  0.9 0.7 4 -0.1 1.5 #> 2    a    a    a    b    b    b    c    c    c   y -0.2 2.0 4 -2.7 2.3 #> 3    a    a    a    b    b    b    c    c    c   z  0.1 0.5 4 -0.4 0.7 #> 4    a    a    a    b    b    b    c    c    c   x  0.3 0.8 4 -0.6 1.3 #> 5    a    a    a    b    b    b    c    c    c   y -1.2 1.3 4 -2.4 0.6 #> 6    a    a    a    b    b    b    c    c    c   z  0.3 0.9 4 -0.6 1.2 #> 7    a    a    a    b    b    b    c    c    c   x  0.8 1.1 3 -0.1 2.0 #> 8    a    a    a    b    b    b    c    c    c   y  0.3 0.9 3 -0.3 1.3 #> 9    a    a    a    b    b    b    c    c    c   z  0.2 1.8 3 -1.8 1.9"},{"path":"https://github.com/tjebo/eye/reference/reveal_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"reveals little helper — reveal_methods","title":"reveals little helper — reveal_methods","text":"S3 generic methods","code":""},{"path":"https://github.com/tjebo/eye/reference/reveal_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reveals little helper — reveal_methods","text":"","code":"revealEye(x, ...)  # S3 method for class 'list' revealEye(x, by, dec, funs, ...)  # S3 method for class 'numeric' revealEye(x, dec, funs, ...)  # S3 method for class 'data.frame' revealEye(x, dec, funs, ...)  # Default S3 method revealEye(x, dec, funs, ...)"},{"path":"https://github.com/tjebo/eye/reference/reveal_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reveals little helper — reveal_methods","text":"x data frame, numeric vector, list numeric vectors ... arguments passed methods character vector names columns. Can several variables! dec many decimals displayed funs really meant used moment - change Summarizing functions named(!) list functions","code":""},{"path":"https://github.com/tjebo/eye/reference/reveal_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reveals little helper — reveal_methods","text":"data frame","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/reveal_split.html","id":null,"dir":"Reference","previous_headings":"","what":"reveals little helper — reveal_split","title":"reveals little helper — reveal_split","text":"splits groups","code":""},{"path":"https://github.com/tjebo/eye/reference/reveal_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reveals little helper — reveal_split","text":"","code":"reveal_split(x, by)"},{"path":"https://github.com/tjebo/eye/reference/reveal_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reveals little helper — reveal_split","text":"x data frame character vector names columns","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/set_eye_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Set list of codes — set_eye_strings","title":"Set list of codes — set_eye_strings","text":"sets list codes used throughout eye package coding kind stuff. want change recognized codes, place . See examples easily overwrite . important must pass character vector! cases always ignored, need worry bit.","code":""},{"path":"https://github.com/tjebo/eye/reference/set_eye_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set list of codes — set_eye_strings","text":"","code":"set_eye_strings(   right = c(\"r\", \"re\", \"od\", \"right\"),   left = c(\"l\", \"le\", \"os\", \"left\"),   both = c(\"b\", \"both\", \"ou\"),   iop = c(\"iop\", \"gat\", \"nct\"),   iop_partial = c(\"pressure\"),   va = c(\"va\", \"bcva\"),   va_method = c(\"etdrs\", \"snellen\", \"logmar\"),   va_partial = c(\"acuit\"),   id = c(\"pat\", \"id\"),   eye = c(\"eye\", \"eyes\"),   nlp = c(\"nlp\", \"no light perception\", \"no light\", \"no perception of light\", \"npl\"),   lp = c(\"lp\", \"light perception\", \"perception of light\", \"pl\"),   hm = c(\"hm\", \"handmotion\", \"hand movement\", \"hand movements\"),   cf = c(\"cf\", \"counting finger\", \"counting fingers\", \"finger count\", \"count fingers\"),   ... )"},{"path":"https://github.com/tjebo/eye/reference/set_eye_strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set list of codes — set_eye_strings","text":"right right eyes left left eyes eyes iop IOP codes iop_partial partial strings used find IOP columns va VA codes va_method VA methods (used recognize VA columns - strings occur \"fully\", .e., part sth else) va_partial Also used find VA columns - looking partial strings id patient column codes eye eye column codes nlp VA values recognised \"light perception\" lp VA values recognised \"light perception\" hm VA values recognised \"hand movement\" cf VA values recognised \"count fingers\" ... currently used, might needed future","code":""},{"path":"https://github.com/tjebo/eye/reference/set_eye_strings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set list of codes — set_eye_strings","text":"Beware, setting recognised strings fully overwrite previously recognised ones. want keep , need write .","code":""},{"path":"https://github.com/tjebo/eye/reference/set_eye_strings.html","id":"restoring-the-defaults","dir":"Reference","previous_headings":"","what":"Restoring the defaults","title":"Set list of codes — set_eye_strings","text":"restore defaults, simply call set_eye_strings empty","code":""},{"path":"https://github.com/tjebo/eye/reference/set_eye_strings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set list of codes — set_eye_strings","text":"","code":"# To expand recognized codes for eyes, e.g. if you want to use French names set_eye_strings(right = c(\"droit\", \"od\"), left = c(\"gauche\", \"og\"))  # To restore the defaults, simply call set_eye_strings empty set_eye_strings()"},{"path":"https://github.com/tjebo/eye/reference/snellen_steps.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert plus minus entries — snellen_steps","title":"Convert plus minus entries — snellen_steps","text":"Convert plus minus entries","code":""},{"path":"https://github.com/tjebo/eye/reference/snellen_steps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert plus minus entries — snellen_steps","text":"","code":"snellensteps(x, smallstep)"},{"path":"https://github.com/tjebo/eye/reference/snellen_steps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert plus minus entries — snellen_steps","text":"x Vector VA entries class snellen - needs format xx/yy smallstep plusminus shall considered logmar equivalent","code":""},{"path":"https://github.com/tjebo/eye/reference/snellen_steps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert plus minus entries — snellen_steps","text":"character vector Snellen entries","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/sort_substr.html","id":null,"dir":"Reference","previous_headings":"","what":"sort substrings — sort_substr","title":"sort substrings — sort_substr","text":"unify code substrings arrange, tokenizing","code":""},{"path":"https://github.com/tjebo/eye/reference/sort_substr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sort substrings — sort_substr","text":"","code":"sort_substr(x, list_substr)"},{"path":"https://github.com/tjebo/eye/reference/sort_substr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sort substrings — sort_substr","text":"x vector strings list_substr list substrings match sort - order list defines resulting order string names list - names codes tokens matched .","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/split_mult.html","id":null,"dir":"Reference","previous_headings":"","what":"split columns in multiple by regex — split_mult","title":"split columns in multiple by regex — split_mult","text":"Reveal helper. cuts column multiple reveal","code":""},{"path":"https://github.com/tjebo/eye/reference/split_mult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"split columns in multiple by regex — split_mult","text":"","code":"split_mult(x, col, pattern = \"_\", into = NULL, prefix = \"var\", sep = \"\")"},{"path":"https://github.com/tjebo/eye/reference/split_mult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"split columns in multiple by regex — split_mult","text":"x data frame col character pattern regex split names columns - character vector length n splits prefix specified, names created \"prefix(sep)index\" sep separator prefix index","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/str_search.html","id":null,"dir":"Reference","previous_headings":"","what":"String search helper — str_search","title":"String search helper — str_search","text":"whole_str finds haystack \"whole needles\" non character boundaries part_str finds haystacks match needles both_str find haystacks contain needles","code":""},{"path":"https://github.com/tjebo/eye/reference/str_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String search helper — str_search","text":"","code":"whole_str(haystack, needle)  part_str(haystack, needle)  both_str(haystack, needle)"},{"path":"https://github.com/tjebo/eye/reference/str_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String search helper — str_search","text":"haystack object look needle needle vector strings look - accepts regular expressions","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/tidyNA.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy NA entries to actual NA values — tidyNA","title":"Tidy NA entries to actual NA values — tidyNA","text":"Creates tidy NA entries - NA equivalent strings tidied actual NA values","code":""},{"path":"https://github.com/tjebo/eye/reference/tidyNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy NA entries to actual NA values — tidyNA","text":"","code":"tidyNA(x, ...)  tidyNA_low(x, ...)  isNAstring(x, string = NULL, defaultstrings = TRUE)"},{"path":"https://github.com/tjebo/eye/reference/tidyNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy NA entries to actual NA values — tidyNA","text":"x Vector ... passed isNAstring string vector full strings replaced NA defaultstrings default (TRUE), following strings replaced NA values: c(\"\\.+\", \"\", \"\\s+\", \"n/\", \"na\", \"null\", \"^-$\").","code":""},{"path":"https://github.com/tjebo/eye/reference/tidyNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy NA entries to actual NA values — tidyNA","text":"character vector","code":""},{"path":"https://github.com/tjebo/eye/reference/tidyNA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tidy NA entries to actual NA values — tidyNA","text":"tidyNA_low internal function used VA cleaning returning lower case vector.","code":""},{"path":"https://github.com/tjebo/eye/reference/tidyNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy NA entries to actual NA values — tidyNA","text":"","code":"x <- c(\"a\", \"   \", \".\", \"-\", \"NULL\") tidyNA(x) #> [1] \"a\" NA  NA  NA  NA   # in addition to the default strings, a new string can be added tidyNA(x, string = \"a\") #> [1] NA NA NA NA NA  # or just remove the strings you want tidyNA(x, string = \"a\", defaultstrings = FALSE) #> [1] NA     \"   \"  \".\"    \"-\"    \"NULL\""},{"path":"https://github.com/tjebo/eye/reference/tocapital.html","id":null,"dir":"Reference","previous_headings":"","what":"Capitalize words — tocapital","title":"Capitalize words — tocapital","text":"capitalises single words","code":""},{"path":"https://github.com/tjebo/eye/reference/tocapital.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capitalize words — tocapital","text":"","code":"tocapital(x)"},{"path":"https://github.com/tjebo/eye/reference/tocapital.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capitalize words — tocapital","text":"x string vector","code":""},{"path":"https://github.com/tjebo/eye/reference/tocapital.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capitalize words — tocapital","text":"Character vector","code":""},{"path":"https://github.com/tjebo/eye/reference/va.html","id":null,"dir":"Reference","previous_headings":"","what":"Visual acuity notation conversion — va","title":"Visual acuity notation conversion — va","text":"Cleans converts visual acuity notations (classes) Snellen (decimal, meter feet), ETDRS, logMAR.","code":""},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visual acuity notation conversion — va","text":"","code":"va(   x,   from = NULL,   to = NULL,   type = \"ft\",   smallstep = FALSE,   noplus = FALSE,   quali_values = NULL )"},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visual acuity notation conversion — va","text":"x Vector visual acuity entries. Must atomic. Snellen fractions need entered \"/\" force evaluate notation convert - Must \"etdrs\", \"logmar\", \"snellen\" \"snellendec\". Ignored value plausible. class convert. \"etdrs\", \"logmar\" \"snellen\" - case allowed. NULL (default), simply \"clean \" VA entries. may result vector \"mixed\" VA notations. type Snellen notation convert: \"m\", \"dec\" \"ft\" smallstep +/- entries evaluated. FALSE: increase/decrease Snellen fractions lines. TRUE: plus/minus entries equivalent 0.02 logmar noplus ignoring plus/minus entries just returning snellen fraction. overrides smallstep argument. quali_values define values qualitative entries (see details)","code":""},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visual acuity notation conversion — va","text":"vector va class. See also \"VA classes\"","code":""},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"va-conversion","dir":"Reference","previous_headings":"","what":"VA conversion","title":"Visual acuity notation conversion — va","text":"logMAR ETDRS: logMAR rounded first digit converted visual acuity chart (see section VA chart) Snellen logMAR: logMAR = -1 * log10(snellen_frac) Snellen ETDRS: ETDRS = 85 + 50 * log10(snellen_frac) Gregori et al. DOI: 10.1097/iae.0b013e3181d87e04 ETDRS logMAR: logMAR = -0.02 * etdrs + 1.7 Beck et al. DOI: 10.1016/s0002-9394(02)01825-1 Hand movements counting fingers converted following Schulze-Bonsel et al. DOI: 10.1167/iovs.05-0981 () light perception converted following suggestions Michael Bach","code":""},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"qualitative-visual-acuity-entries","dir":"Reference","previous_headings":"","what":"Qualitative visual acuity entries","title":"Visual acuity notation conversion — va","text":"order calculate qualitative entries counting fingers, hand movement () perception light, use logMAR ! Qualitative visual acuity lower counting fingers assigned 0 ETDRS letter, order keep measurement (: NA). difficult justify \"negative\" letter score test specific range (0-100). default, va recognises following values (case matter!) light perception := c(\"nlp\", \"light perception\", \"light\", \"perception light\", \"npl\"), Light perception: = c(\"lp\", \"light perception\", \"perception light\", \"pl\"), Hand movements: = c(\"hm\",  \"handmotion\", \"hand movement\", \"hand movements\"), Counting fingers: = c(\"cf\", \"counting finger\", \"counting fingers\", \"finger count\", \"count fingers\")","code":""},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"custom-values-for-qualitative-entries","dir":"Reference","previous_headings":"","what":"Custom values for qualitative entries","title":"Visual acuity notation conversion — va","text":"define values qualitative entries, need pass names list names c(\"cf\", \"hm\", \"nlp\", \"lp\") - order. accepts values can reasonably converted numeric values converts logMAR. want convert different notation, need call va() second time.","code":""},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"converting-to-snellen","dir":"Reference","previous_headings":"","what":"Converting to Snellen","title":"Visual acuity notation conversion — va","text":"Although seems good statistical reason convert back Snellen, natural thing eye specialists think Snellen. conversion snellen gives good gauge visual acuity patients . However, back-conversion considered exact science attempt use formulas result weird Snellen values correspondence common charts. Therefore, Snellen matching nearest ETDRS logMAR value VA chart used.","code":""},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"va-chart","dir":"Reference","previous_headings":"","what":"VA chart","title":"Visual acuity notation conversion — va","text":"can find chart eye:::va_chart. chart VA conversion formulas based charts Holladay et al. DOI: 10.1016/j.jcrs.2004.01.014, Beck et al. DOI: 10.1016/s0002-9394(02)01825-1, Gregori et al. DOI: 10.1097/iae.0b013e3181d87e04. ETDRS values NLP PL deliberately set values unlikely happen chance wrong entry (integers), internal reasons make conversion easier.","code":""},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"accepted-va-formats-plausibility-checks","dir":"Reference","previous_headings":"","what":"Accepted VA formats / Plausibility checks","title":"Visual acuity notation conversion — va","text":"Snellen fractions (meter/ feet) need entered fraction \"/\". fractions allowed. can get creative snellens. see \"Examples\" ETDRS must integer-equivalent 0 100 (integer equivalent means, can also character vector) logMAR must -0.3 <= x <= 3.0 Snellen decimal must 0 < x <= 2 Qualitative must either PL, LP, NLP, NPL, HM, CF (case allowed) Plausibility checks performed automatically manually defined notation. element implausible/ recognized converted NA","code":""},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"entries-with-mixed-va-notations","dir":"Reference","previous_headings":"","what":"Entries with mixed VA notations","title":"Visual acuity notation conversion — va","text":"Use va_mixed instead.","code":""},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"snellen-entries","dir":"Reference","previous_headings":"","what":"Snellen \"+/-\" entries","title":"Visual acuity notation conversion — va","text":"default, plus/minus entries evaluated intended test design: Snellen fractions increase/decrease lines.   smallstep = TRUE, snellen optotype considered equivalent 0.02 logmar (assuming 5 letters row chart)","code":"- if entry -2 to +2 : take same Snellen value - if < -2 : take Snellen value one line below - if > +2 : take Snellen value one line above"},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"va-cleaning","dir":"Reference","previous_headings":"","what":"VA cleaning","title":"Visual acuity notation conversion — va","text":"details see clean_va() NA assigned strings \".\" \"\", \"n/\" \"   \" notation qualitative entries simplified.","code":""},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"va-classes","dir":"Reference","previous_headings":"","what":"VA classes","title":"Visual acuity notation conversion — va","text":"hood, convertVA returns vector three classes: va One snellen, snellendec, logmar, etdrs quali. Either character (Snellen, Snellen decimal, qualitative), numeric (logMAR), integer (ETDRS).","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/va.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visual acuity notation conversion — va","text":"","code":"## calling va without specifying \"to\" will clean visual acuity entries ## without conversion into another notation. Weird entries will be ## replaced by a missing value that R recognises as such x <- c(23, \"\", NA, \"N/A\", \"Not measured\", \"20/50\", 74, 58) va(x) #> 3x NA introduced for: , N/A, Not measured #> [1] \"23\"    NA      NA      NA      NA      \"20/50\" \"74\"    \"58\"     ## ... or convert to snellen va(x, to = \"snellen\") #> From snellen. Could be snellen, logmar, snellendec, etdrs #> 6x NA introduced for: 23, , N/A, Not measured, 74, 58 #> [1] NA      NA      NA      NA      NA      \"20/50\" NA      NA       ## Dealing with those \"plus/minus\" entries, and qualitative values such as \"HM\" va(c(\"NLP\", \"NPL\", \"PL\", \"LP\", \"HM\", \"CF\", \"6/60\", \"20/200\", \"6/9\",  \"20/40\", \"20/40+3\", \"20/50-2\"), to = \"snellen\") #> From snellen #>  [1] \"20/20000\" \"20/20000\" \"20/10000\" \"20/10000\" \"20/4000\"  \"20/2000\"  #>  [7] \"20/200\"   \"20/200\"   \"20/32\"    \"20/40\"    \"20/32\"    \"20/50\"     ## A mix of notations is also possible x <- c(\"NLP\", \"0.8\", \"34\", \"3/60\", \"2/200\", \"20/40+3\", \"20/50-2\") va(x, to = \"snellen\") #> From snellen. Could be snellen, logmar, snellendec, etdrs #> 2x NA introduced for: 0.8, 34 #> [1] \"20/20000\" NA         NA         \"20/400\"   \"20/2000\"  \"20/32\"    \"20/50\"     ## Any fraction is possible, and empty values ## change Snellen type to meter with type = \"m\" x <- c(\"CF\", \"3/60\", \"2/200\", \"\", \"20/40+3\", \".\", \"      \") va(x, to = \"snellen\", type = \"m\") #> From snellen #> 3x NA introduced for: , .,        #> [1] \"6/600\" \"6/120\" \"6/600\" NA      \"6/9.6\" NA      NA"},{"path":"https://github.com/tjebo/eye/reference/va_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"VA conversion methods — va_methods","title":"VA conversion methods — va_methods","text":"S3 methods VA conversion","code":""},{"path":"https://github.com/tjebo/eye/reference/va_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VA conversion methods — va_methods","text":"","code":"convertVA(x, ...)  # S3 method for class 'quali' convertVA(x, to, type, ...)  # S3 method for class 'snellendec' convertVA(x, to, type, ...)  # S3 method for class 'snellen' convertVA(x, to, type, smallstep, noplus, ...)  # S3 method for class 'logmar' convertVA(x, to, type, ...)  # S3 method for class 'etdrs' convertVA(x, to, type, ...)  # Default S3 method convertVA(x, to, ...)"},{"path":"https://github.com/tjebo/eye/reference/va_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"VA conversion methods — va_methods","text":"x vector visual acuities ... arguments passed methods VA class convert type snellen notation. One \"ft\", \"m\" \"dec\" smallstep plus/minus entries evaluated. Default increase/decrease snellen fractions lines. TRUE, snellen optotype considered equivalent 0.02 logmar 1 ETDRS letter (assuming 5 letters row chart) noplus ignoring plus/minus entries just returning snellen fraction. overrides smallstep argument.","code":""},{"path":"https://github.com/tjebo/eye/reference/va_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"VA conversion methods — va_methods","text":"vector visual acuity class va. See also \"VA classes\"","code":""},{"path":"https://github.com/tjebo/eye/reference/va_methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"VA conversion methods — va_methods","text":"VA can snellen feet/meter/decimal, logMAR, ETDRS, \"qualitative\" (Counting fingers, etc.) Snellen fractions need either form 6/x 20/x ETDRS must 0 100 logMAR must -0.3 3.0 Qualitative must PL, LP, NLP, NPL, HM, CF (case allowed) element recognized converted NA","code":""},{"path":"https://github.com/tjebo/eye/reference/va_methods.html","id":"conversion","dir":"Reference","previous_headings":"","what":"Conversion","title":"VA conversion methods — va_methods","text":"conversion theory behind conversion rules see va section VA conversion.","code":""},{"path":"https://github.com/tjebo/eye/reference/va_methods.html","id":"plus-minus-entries","dir":"Reference","previous_headings":"","what":"plus/minus entries","title":"VA conversion methods — va_methods","text":"following rules plus minus notations applied: entry -2 +2 : take Snellen value < -2 : take Snellen value one line > +2: Snellen value one line Snellen unfortunately often entered \"+/-\", violation psychophysical method designed assign one unambiguous value visual acuity, non-arbitrary thresholds based psychometric functions. Therefore, transforming \"+/-\" notation actual results problematic suggestion convert remain approximation likely \"true\" result. Even , given conditions work charts 4 5 optotypes line, visual acuity always tested charts. Yet, believe approach still better just omitting letters (worse) assigning missing value entries.","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/va_mixed.html","id":null,"dir":"Reference","previous_headings":"","what":"VA classes — va_mixed","title":"VA classes — va_mixed","text":"va_mixed wrapper around va possible VA notations. default, c(\"snellen\", \"etdrs\", \"logmar\", \"snellendec\") converted - order! tricky cases see details examples. Note va_mixed notify notation values transformed, values replaced NA.","code":""},{"path":"https://github.com/tjebo/eye/reference/va_mixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VA classes — va_mixed","text":"","code":"va_mixed(x, to = \"logmar\", possible = c(\"snellen\", \"etdrs\", \"logmar\", \"quali\"))"},{"path":"https://github.com/tjebo/eye/reference/va_mixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"VA classes — va_mixed","text":"x vector mixed VA entries notation converted possible possible VA notations. order defines class prioritised value can one class, see details. Default = c(\"snellen\", \"etdrs\", \"logmar\", \"quali\")","code":""},{"path":"https://github.com/tjebo/eye/reference/va_mixed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"VA classes — va_mixed","text":"Mixed entries challenging, unfortunately seem occur real life data. fairly individual , hopefully happen possible notations. Snellen fractions usually challenging contain \"/\", thus easy recognize. Values 0 3 problematic, particular full integers - can EDTRS, snellen decimal notation logmar. default, snellen decimal recognized, can specify \"possible\" argument. , know ETDRS value less 4, can safely give precedence logmar instead, like : possible = c(\"snellen\", \"logmar\", \"etdrs\") @examples","code":""},{"path":"https://github.com/tjebo/eye/reference/va_mixed.html","id":"awfully-mixed-notation-and-note-the-wrong-value-","dir":"Reference","previous_headings":"","what":"awfully mixed notation!! (and note the wrong -1 value)","title":"VA classes — va_mixed","text":"x <- c(NA, \"nlp\", 1:2, 1.1, -1, \"20/40\", \"4/6\", \"6/1000\", 34) va_mixed(x, = \"snellen\")","code":""},{"path":"https://github.com/tjebo/eye/reference/va_mixed.html","id":"-i-only-have-snellen-and-snellen-decimal-notation-in-my-data-","dir":"Reference","previous_headings":"","what":"\"I only have snellen and snellen decimal notation in my data\"","title":"VA classes — va_mixed","text":"va_mixed(x, = \"snellen\", possible = c(\"snellen\", \"snellendec\"))","code":""},{"path":"https://github.com/tjebo/eye/reference/va_mixed.html","id":"-i-have-snellen-logmar-and-etdrs-in-my-data-and-there-is-no-etdrs-value","dir":"Reference","previous_headings":"","what":"\"I have snellen, logmar and etdrs in my data, and there is no etdrs value","title":"VA classes — va_mixed","text":"less 4\" va_mixed(x, = \"snellen\", possible = c(\"snellen\", \"logmar\", \"etdrs\"))","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/reference/warnings.html","id":null,"dir":"Reference","previous_headings":"","what":"recode warnings — warnings","title":"recode warnings — warnings","text":"recode warnings","code":""},{"path":"https://github.com/tjebo/eye/reference/warnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"recode warnings — warnings","text":"","code":"warn_recode(x)  messageNA(x, eyestrings)"},{"path":"https://github.com/tjebo/eye/reference/which_va.html","id":null,"dir":"Reference","previous_headings":"","what":"Guessing the VA class — which_va","title":"Guessing the VA class — which_va","text":"Guessing VA notation (VA class). Requires x prepared clean_va which_va: guessing VA class entire vector","code":""},{"path":"https://github.com/tjebo/eye/reference/which_va.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guessing the VA class — which_va","text":"","code":"which_va(x, quali = c(\"nlp\", \"npl\", \"pl\", \"lp\", \"hm\", \"cf\"))"},{"path":"https://github.com/tjebo/eye/reference/which_va.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guessing the VA class — which_va","text":"x Vector VA entries quali strings qualitative visual acuity entries","code":""},{"path":"https://github.com/tjebo/eye/reference/which_va.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guessing the VA class — which_va","text":"character vector indicating guessed VA notation","code":""},{"path":[]},{"path":[]},{"path":"https://github.com/tjebo/eye/news/index.html","id":"eye-130","dir":"Changelog","previous_headings":"","what":"eye 1.3.0","title":"eye 1.3.0","text":"CRAN release: 2025-09-26 new functionality qualitative visual acuity entries: values recognised qualitative entries, one can define values recognized using set_eye_strings.(#36) can now set custom values qualitative entries (hand movements, count fingers etc) using “quali_values” argument va recodeye eyes now also recognize “” coding string “eyes” updated package documentation file updated hyperlinks fixed issues #43, #48, #50 removed clean_va alias cleanVA exported namespace keep simpler Improved warning removing character column reveal() moved revealEye generic internal functions va_mixed: added default possible argument, thus removing snellen decimals recognised notations default.","code":""},{"path":"https://github.com/tjebo/eye/news/index.html","id":"eye-121","dir":"Changelog","previous_headings":"","what":"eye 1.2.1","title":"eye 1.2.1","text":"CRAN release: 2021-09-04 Bug fixes: eye column found, eyes also returns list #31 set_eye_strings also updates eye column #32 partial eye strings recognized column names #33 to_etdrs now correctly always returns integer class vector #34 conversion pure “NA” saved character now correctly returns NA #35 logMAR return rounded values first digit noplus = TRUE #37 to_etdrs pure qualitative values correctly returns 0 NPL PL #38","code":""},{"path":"https://github.com/tjebo/eye/news/index.html","id":"eye-120","dir":"Changelog","previous_headings":"","what":"eye 1.2.0","title":"eye 1.2.0","text":"CRAN release: 2021-03-22 Summary changes: eyes() - now returns lists (class “eyes”) easier access count data set_eye_strings() - set string codes globally! makes easier people using different languages use eye. recodeye: renamed “eyecodes” argument “eyestrings” Change terminology “subjects/id” rather “patients” simplified code Details: eyes(): “details” argument creates object class “eyes_details”, allowing access depth count statistics subject ids includes new print methods class “eyes” “eyes_details” change id eye arguments “id_col” “eye_col” - previous code break partial argument name matching. However, new names make clearer arguments . calling set_eye_strings super-assign new codes internal list object eye_codes getElem_eyecol now gives precedence columns called “eye” “eyes” (#30) Simplifications: simplified pivoting myop using pivot_longer regex feature removed …chr arguments getElem… functions (redundant) getElem… now vectors (anyways used vectors)","code":""},{"path":"https://github.com/tjebo/eye/news/index.html","id":"eye-110","dir":"Changelog","previous_headings":"","what":"eye 1.1.0","title":"eye 1.1.0","text":"CRAN release: 2021-03-08 summary changes: new features function eyestr important bug fixes Details: eyestr: new “english” argument flexibility (#26) eyestr removed “para” argument eyestr prints one eye correctly singular (#25) eyestr added “caps” argument flexibility spelling eyestr removed “UK” argument (difference spelling numbers :) eyes fixed missing reference column (#27) added internal function tidyNA_low avoid double tolower call recodeye fixed fail trailing white space (#28) which_va fixed conversion error mixed ETDRS logmar (#29)","code":""},{"path":"https://github.com/tjebo/eye/news/index.html","id":"eye-101","dir":"Changelog","previous_headings":"","what":"eye 1.0.1","title":"eye 1.0.1","text":"CRAN release: 2021-01-10 Nasty bug fix! Erroneous conversion quality visual acuity entries ETDRS (#24) removed deprecated function age() VA chart now internal data, exported - ideally VA chart necessary anyways. However, really need see , can still access eye:::va_chart. Note ETDRS values chosen easier conversion. convertVA checkVA","code":""},{"path":"https://github.com/tjebo/eye/news/index.html","id":"eye-100","dir":"Changelog","previous_headings":"","what":"eye 1.0.0","title":"eye 1.0.0","text":"CRAN release: 2021-01-07 Major version upgrade eye 0.1.0!","code":""},{"path":[]},{"path":"https://github.com/tjebo/eye/news/index.html","id":"visual-acuity-handling-1-0-0","dir":"Changelog","previous_headings":"Functions and objects (details)","what":"Visual acuity handling","title":"eye 1.0.0","text":"introduced new verbs as_... to_... class conversion nice integration known R grammar (#6) - simple wrapper va(x, = ...) add arguments “”, “noplus” “smallstep” removed “from_logmar” “logmarstep” VA notation guessing done single element , forced choice either likely argument “”. implausible values forced NA. weird snellen values (e.g., 20/41) now also converted snellen values (#21). New S3 methods introduced check plausibility entries VA class. Adding plus/minus entries now done actual logmar values rather via lookup VA chart (rewrite snellen_steps function) new function va_mixed vectors mixed VA notations (replacing previous va_dissect) new function cleanVA","code":""},{"path":"https://github.com/tjebo/eye/news/index.html","id":"smaller-fixes-1-0-0","dir":"Changelog","previous_headings":"Functions and objects (details)","what":"Smaller fixes","title":"eye 1.0.0","text":"recodeye() recognises “/ou/b” eyes. dropunknown unclear codings converted NA default (warning) removed numcode argument (numeric codes can passed via “”) eyes() accepting quoted unquoted arguments (#16) add stop() main argument data frame eyes() now also deals “eye cases” (#17) now also finding eye columns funny names, e.g. EyeName (#18) eyes now returns meaningful result empty data frames) (#19) removed “report” argument reveal() drop unused group levels (#13) eyestr() moved eyes_to_str step eyes() eyestr() age() renamed getage() order avoid potential even likely clashes users environment, especially using age() within local environment data frame (e.g., using ()) blink() deprecated. message function longer maintained, kept package. isNAstring now also converts “-” string NA new exported function: tidyNA() cleans NA entries clean_va returns numeric vector entries numeric removed functions va_dissect() which_va_dissect()","code":""},{"path":"https://github.com/tjebo/eye/news/index.html","id":"data-sets-1-0-0","dir":"Changelog","previous_headings":"Functions and objects (details)","what":"Data sets","title":"eye 1.0.0","text":"Removed data set amd - now part dedicated ophthalmic data set package “eyedata” removed data set ‘va_quali’ anyways part “va_chart”","code":""},{"path":"https://github.com/tjebo/eye/news/index.html","id":"eye-010","dir":"Changelog","previous_headings":"","what":"eye 0.1.0","title":"eye 0.1.0","text":"CRAN release: 2020-06-25 eye package online! eye tool facilitate common tasks ophthalmic research. visual acuity conversion function va() provides eye researchRs long coveted tool handle different visual acuity notations. works Snellen, logMAR ETDRS. recodeye allows easy recoding eye variable. also functions mainly intelligent wrapper around already existing functionalities, myop hyperop reshaping eye specific data, reveal blink. See data new eye.","code":""}]
